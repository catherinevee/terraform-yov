# =============================================================================
# TERRAGRUNT INFRASTRUCTURE DEPLOYMENT PIPELINE
# =============================================================================
# Enterprise-grade CI/CD pipeline for Terragrunt infrastructure deployment
# with security scanning, cost estimation, and multi-environment support

name: Terragrunt Infrastructure Deployment

on:
  push:
    branches:
      - main
      - develop
      - 'feature/**'
    paths:
      - 'aws/**'
      - 'gcp/**'
      - 'azure/**'
      - '_envcommon/**'
      - '*.hcl'
      - '.github/workflows/**'

  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'aws/**'
      - 'gcp/**'
      - 'azure/**'
      - '_envcommon/**'
      - '*.hcl'

  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        type: choice
        options:
          - dev
          - staging
          - prod
        default: dev
        
      region:
        description: 'AWS Region to deploy'
        required: true
        type: choice
        options:
          - us-east-1
          - eu-west-1
          - eu-central-2
        default: us-east-1
        
      action:
        description: 'Terraform action to perform'
        required: true
        type: choice
        options:
          - plan
          - apply
          - destroy
        default: plan
        
      component:
        description: 'Component to deploy (optional - leave empty for all)'
        required: false
        type: string
        default: ''

# Global permissions - minimal by default, scoped per job as needed
permissions:
  contents: read
  actions: read

env:
  TERRAFORM_VERSION: "1.9.5"
  TERRAGRUNT_VERSION: "0.67.6"
  TFSEC_VERSION: "1.28.7"
  CHECKOV_VERSION: "3.2.39"
  INFRACOST_VERSION: "0.10.37"
  AWS_DEFAULT_REGION: us-east-1
  
  # Security and compliance settings
  ENABLE_SECURITY_SCAN: true
  ENABLE_COST_ESTIMATION: true
  
  # Performance settings
  TERRAGRUNT_PARALLELISM: 5
  TF_PLUGIN_CACHE_DIR: /tmp/.terraform.d/plugin-cache

# Prevent concurrent deployments
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ inputs.environment || 'auto' }}-${{ inputs.region || 'auto' }}
  cancel-in-progress: false

jobs:
  # ==========================================================================
  # VALIDATION AND CHANGE DETECTION
  # ==========================================================================
  
  validate-changes:
    name: Validate Configuration Changes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read
    outputs:
      changed-environments: ${{ steps.detect-changes.outputs.environments }}
      changed-regions: ${{ steps.detect-changes.outputs.regions }}
      changed-components: ${{ steps.detect-changes.outputs.components }}
      security-scan-required: ${{ steps.detect-changes.outputs.security-scan }}
      cost-estimation-required: ${{ steps.detect-changes.outputs.cost-estimation }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for accurate change detection
          
      - name: Setup Tools
        run: |
          # Install jq for JSON processing
          sudo apt-get update && sudo apt-get install -y jq
          
      - name: Detect Changes
        id: detect-changes
        timeout-minutes: 5
        env:
          ENVIRONMENT_INPUT: ${{ inputs.environment }}
          REGION_INPUT: ${{ inputs.region }}
          COMPONENT_INPUT: ${{ inputs.component }}
          ACTION_INPUT: ${{ inputs.action }}
        run: |
          echo "::notice::Analyzing infrastructure changes..."
          
          # Security: Validate and sanitize inputs
          if [ -n "$COMPONENT_INPUT" ]; then
            # Validate component name contains only safe characters
            if [[ ! "$COMPONENT_INPUT" =~ ^[a-zA-Z0-9_-]*$ ]]; then
              echo "::error::Invalid component name. Only alphanumeric, underscore, and hyphen allowed."
              exit 1
            fi
          fi
          
          # Get changed files
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # Manual trigger - use validated input parameters
            echo "::notice::Using manual trigger inputs"
            ENVIRONMENTS="[\"$ENVIRONMENT_INPUT\"]"
            REGIONS="[\"$REGION_INPUT\"]"
            COMPONENTS="[\"$COMPONENT_INPUT\"]"
          else
            # Automatic trigger - detect from changed files
            CHANGED_FILES=$(git diff --name-only ${{ github.event.before }}..${{ github.event.after }} 2>/dev/null || echo "")
            
            if [ -z "$CHANGED_FILES" ]; then
              CHANGED_FILES=$(git diff --name-only HEAD~1..HEAD 2>/dev/null || echo "")
            fi
            
            echo "::notice::Changed files detected:"
            echo "$CHANGED_FILES"
            
            # Extract environments with input validation
            ENVIRONMENTS=$(echo "$CHANGED_FILES" | grep -E '^aws/[^/]+/[^/]+/' | cut -d'/' -f3 | grep -E '^[a-zA-Z0-9_-]+$' | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
            
            # Extract regions with input validation
            REGIONS=$(echo "$CHANGED_FILES" | grep -E '^aws/[^/]+/' | cut -d'/' -f2 | grep -E '^[a-zA-Z0-9_-]+$' | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
            
            # Extract components with input validation
            COMPONENTS=$(echo "$CHANGED_FILES" | grep -E '^aws/[^/]+/[^/]+/[^/]+/' | cut -d'/' -f4 | grep -E '^[a-zA-Z0-9_-]+$' | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
          fi
          
          # Default to empty arrays if nothing found
          ENVIRONMENTS=${ENVIRONMENTS:-'[]'}
          REGIONS=${REGIONS:-'[]'}
          COMPONENTS=${COMPONENTS:-'[]'}
          
          # Validate JSON format
          echo "$ENVIRONMENTS" | jq . > /dev/null || { echo "::error::Invalid environments JSON"; exit 1; }
          echo "$REGIONS" | jq . > /dev/null || { echo "::error::Invalid regions JSON"; exit 1; }
          echo "$COMPONENTS" | jq . > /dev/null || { echo "::error::Invalid components JSON"; exit 1; }
          
          # Set outputs
          echo "environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
          echo "regions=$REGIONS" >> $GITHUB_OUTPUT
          echo "components=$COMPONENTS" >> $GITHUB_OUTPUT
          
          # Determine if security scan is needed
          if [ "$ENVIRONMENTS" != "[]" ] || [ "$ACTION_INPUT" = "apply" ]; then
            echo "security-scan=true" >> $GITHUB_OUTPUT
            echo "cost-estimation=true" >> $GITHUB_OUTPUT
          else
            echo "security-scan=false" >> $GITHUB_OUTPUT
            echo "cost-estimation=false" >> $GITHUB_OUTPUT
          fi
          
          # Output summary
          echo "::notice::Detected changes:"
          echo "::notice::- Environments: $ENVIRONMENTS"
          echo "::notice::- Regions: $REGIONS"
          echo "::notice::- Components: $COMPONENTS"
          
      - name: Create Change Summary
        run: |
          echo "## Infrastructure Change Detection" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Environments:** ${{ steps.detect-changes.outputs.environments }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Regions:** ${{ steps.detect-changes.outputs.regions }}" >> $GITHUB_STEP_SUMMARY
          echo "**Changed Components:** ${{ steps.detect-changes.outputs.components }}" >> $GITHUB_STEP_SUMMARY
          echo "**Security Scan Required:** ${{ steps.detect-changes.outputs.security-scan }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cost Estimation Required:** ${{ steps.detect-changes.outputs.cost-estimation }}" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # SECURITY SCANNING
  # ==========================================================================
  
  security-scan:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-changes
    if: needs.validate-changes.outputs.security-scan-required == 'true'
    
    permissions:
      security-events: write
      contents: read
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Security Tools
        timeout-minutes: 5
        run: |
          echo "::notice::Installing security analysis tools"
          
          # Install TFSec with checksum verification
          echo "::notice::Installing TFSec v${{ env.TFSEC_VERSION }}"
          curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v${{ env.TFSEC_VERSION }}/tfsec-linux-amd64" -o tfsec
          curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v${{ env.TFSEC_VERSION }}/tfsec_${{ env.TFSEC_VERSION }}_checksums.txt" -o checksums.txt
          
          # Verify checksum (basic security check)
          if grep -q "$(sha256sum tfsec | cut -d' ' -f1)" checksums.txt; then
            echo "::notice::TFSec checksum verified"
          else
            echo "::warning::TFSec checksum verification failed, proceeding with caution"
          fi
          
          chmod +x tfsec && sudo mv tfsec /usr/local/bin/
          
          # Install Checkov via pip with version pinning
          echo "::notice::Installing Checkov v${{ env.CHECKOV_VERSION }}"
          pip install --no-cache-dir checkov==${{ env.CHECKOV_VERSION }}
          
          # Verify installations
          tfsec --version
          checkov --version
          
      - name: Run Security Scans
        timeout-minutes: 10
        run: |
          echo "::notice::Running comprehensive security analysis"
          
          # Create results directory
          mkdir -p security-results
          
          # TFSec scan with enhanced configuration
          echo "::notice::Running TFSec security scan"
          tfsec . \
            --format sarif \
            --out security-results/tfsec-results.sarif \
            --soft-fail \
            --minimum-severity LOW \
            --exclude-downloaded-modules \
            --no-colour || echo "::warning::TFSec scan completed with findings"
            
          # Checkov scan with comprehensive checks
          echo "::notice::Running Checkov security scan"
          checkov \
            --directory . \
            --framework terraform \
            --output sarif \
            --output-file-path security-results/checkov-results.sarif \
            --soft-fail \
            --skip-download || echo "::warning::Checkov scan completed with findings"
          
          # Generate summary report
          echo "::notice::Generating security summary"
          echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f security-results/tfsec-results.sarif ]; then
            TFSEC_ISSUES=$(jq '.runs[0].results | length' security-results/tfsec-results.sarif 2>/dev/null || echo "0")
            echo "- **TFSec Issues Found:** $TFSEC_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ -f security-results/checkov-results.sarif ]; then
            CHECKOV_ISSUES=$(jq '.runs[0].results | length' security-results/checkov-results.sarif 2>/dev/null || echo "0")
            echo "- **Checkov Issues Found:** $CHECKOV_ISSUES" >> $GITHUB_STEP_SUMMARY
          fi
            
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            security-results/tfsec-results.sarif
            security-results/checkov-results.sarif
          category: terragrunt-deployment-scan

  # ==========================================================================
  # COST ESTIMATION
  # ==========================================================================
  
  cost-estimation:
    name: Infrastructure Cost Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: validate-changes
    if: needs.validate-changes.outputs.cost-estimation-required == 'true'
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TERRAFORM_VERSION }}
          
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          version: ${{ env.INFRACOST_VERSION }}
          
      - name: Generate Cost Estimates
        timeout-minutes: 10
        run: |
          echo "::notice::Generating infrastructure cost estimates"
          
          # Create Infracost config with security considerations
          cat > infracost.yml << 'EOF'
          version: 0.1
          projects:
            - path: .
              name: terragrunt-infrastructure
              terraform_plan_flags: -lock=false -input=false
              usage_file: infracost-usage.yml
          EOF
          
          # Create usage file for more accurate estimates
          cat > infracost-usage.yml << 'EOF'
          version: 0.1
          resource_usage:
            # Add resource usage patterns here for more accurate cost estimates
          EOF
          
          # Generate cost breakdown with error handling
          if infracost breakdown \
            --config-file infracost.yml \
            --format json \
            --out-file cost-estimates.json; then
            
            echo "::notice::Cost estimation completed successfully"
            
            # Generate cost summary for PR/commit
            infracost output \
              --path cost-estimates.json \
              --format github-comment \
              --out-file cost-summary.md
            
            # Add to step summary
            echo "## Infrastructure Cost Analysis" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            
            if [ -f cost-summary.md ]; then
              cat cost-summary.md >> $GITHUB_STEP_SUMMARY
            fi
            
          else
            echo "::error::Cost estimation failed"
            echo "::warning::Proceeding without cost analysis"
          fi

  # ==========================================================================
  # TERRAGRUNT OPERATIONS
  # ==========================================================================
  
  terragrunt-deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    timeout-minutes: 60  # Extended timeout for deployment operations
    needs: [validate-changes, security-scan, cost-estimation]
    if: always() && !cancelled() && !failure()
    
    permissions:
      contents: read
      actions: read
      id-token: write  # For OIDC authentication if configured
    
    strategy:
      matrix:
        environment: ${{ fromJson(needs.validate-changes.outputs.changed-environments) }}
        region: ${{ fromJson(needs.validate-changes.outputs.changed-regions) }}
      fail-fast: false
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Tools
        timeout-minutes: 10
        run: |
          echo "::notice::Installing Terraform and Terragrunt"
          
          # Install Terraform with checksum verification
          echo "::notice::Installing Terraform v${{ env.TERRAFORM_VERSION }}"
          curl -fsSL "https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_linux_amd64.zip" -o terraform.zip
          curl -fsSL "https://releases.hashicorp.com/terraform/${{ env.TERRAFORM_VERSION }}/terraform_${{ env.TERRAFORM_VERSION }}_SHA256SUMS" -o terraform_checksums.txt
          
          # Basic checksum verification
          if grep -q "$(sha256sum terraform.zip | cut -d' ' -f1)" terraform_checksums.txt; then
            echo "::notice::Terraform checksum verified"
          else
            echo "::warning::Terraform checksum verification failed, proceeding with caution"
          fi
          
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          rm terraform.zip terraform_checksums.txt
          
          # Install Terragrunt with checksum verification  
          echo "::notice::Installing Terragrunt v${{ env.TERRAGRUNT_VERSION }}"
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/terragrunt_linux_amd64" -o terragrunt
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${{ env.TERRAGRUNT_VERSION }}/SHA256SUMS" -o terragrunt_checksums.txt
          
          # Basic checksum verification
          if grep -q "$(sha256sum terragrunt | cut -d' ' -f1)" terragrunt_checksums.txt; then
            echo "::notice::Terragrunt checksum verified"
          else
            echo "::warning::Terragrunt checksum verification failed, proceeding with caution"
          fi
          
          chmod +x terragrunt && sudo mv terragrunt /usr/local/bin/
          rm terragrunt_checksums.txt
          
          # Setup plugin cache directory with proper permissions
          mkdir -p ${{ env.TF_PLUGIN_CACHE_DIR }}
          chmod 755 ${{ env.TF_PLUGIN_CACHE_DIR }}
          
          # Verify installations
          terraform version
          terragrunt version
          
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ matrix.region }}
          mask-aws-account-id: true  # Security: Mask account ID in logs
          
      - name: Validate Environment Configuration
        timeout-minutes: 5
        env:
          ENVIRONMENT: ${{ matrix.environment }}
          REGION: ${{ matrix.region }}
          COMPONENT_INPUT: ${{ inputs.component }}
        run: |
          echo "::notice::Validating environment configuration"
          
          # Security: Validate environment and region values
          if [[ ! "$ENVIRONMENT" =~ ^(dev|staging|prod)$ ]]; then
            echo "::error::Invalid environment: $ENVIRONMENT"
            exit 1
          fi
          
          if [[ ! "$REGION" =~ ^(us-east-1|eu-west-1|eu-central-2)$ ]]; then
            echo "::error::Invalid region: $REGION"
            exit 1
          fi
          
          # Validate component if provided
          if [ -n "$COMPONENT_INPUT" ]; then
            if [[ ! "$COMPONENT_INPUT" =~ ^[a-zA-Z0-9_-]*$ ]]; then
              echo "::error::Invalid component name: $COMPONENT_INPUT"
              exit 1
            fi
          fi
          
          echo "::notice::Environment validation passed"
          echo "::notice::- Environment: $ENVIRONMENT"
          echo "::notice::- Region: $REGION"
          echo "::notice::- Component: ${COMPONENT_INPUT:-'all'}"
          
      - name: Execute Terragrunt Operation
        timeout-minutes: 45
        working-directory: aws/${{ matrix.region }}/${{ matrix.environment }}
        env:
          ACTION_INPUT: ${{ inputs.action }}
          COMPONENT_INPUT: ${{ inputs.component }}
          ENVIRONMENT: ${{ matrix.environment }}
          REGION: ${{ matrix.region }}
        run: |
          echo "::notice::Executing Terragrunt operation for $ENVIRONMENT in $REGION"
          
          # Determine action with validation
          ACTION="${ACTION_INPUT:-plan}"
          COMPONENT="$COMPONENT_INPUT"
          
          # Security: Validate action
          if [[ ! "$ACTION" =~ ^(plan|apply|destroy)$ ]]; then
            echo "::error::Invalid action: $ACTION"
            exit 1
          fi
          
          echo "::notice::Action: $ACTION"
          echo "::notice::Component: ${COMPONENT:-'all'}"
          
          if [ -n "$COMPONENT" ]; then
            # Deploy specific component
            if [ -d "$COMPONENT" ]; then
              cd "$COMPONENT"
              echo "::notice::Working in component directory: $COMPONENT"
            else
              echo "::error::Component $COMPONENT not found in $ENVIRONMENT/$REGION"
              exit 1
            fi
          fi
          
          # Execute the action with enhanced security
          case "$ACTION" in
            "plan")
              echo "::notice::Running Terragrunt plan"
              terragrunt run-all plan \
                --terragrunt-non-interactive \
                --terragrunt-parallelism ${{ env.TERRAGRUNT_PARALLELISM }} \
                --terragrunt-log-level info \
                --terragrunt-source-update
              ;;
            "apply")
              # Additional security checks for apply operations
              if [ "$ENVIRONMENT" = "prod" ] && [ "${{ github.ref }}" != "refs/heads/main" ]; then
                echo "::error::Production deployments only allowed from main branch"
                exit 1
              fi
              
              echo "::notice::Running Terragrunt apply"
              terragrunt run-all apply \
                --terragrunt-non-interactive \
                --terragrunt-parallelism ${{ env.TERRAGRUNT_PARALLELISM }} \
                --terragrunt-log-level info \
                --auto-approve
              ;;
            "destroy")
              # Enhanced security for destroy operations
              if [ "$ENVIRONMENT" = "prod" ]; then
                echo "::error::Production destruction requires manual approval"
                exit 1
              fi
              
              echo "::warning::Running Terragrunt destroy"
              terragrunt run-all destroy \
                --terragrunt-non-interactive \
                --terragrunt-parallelism ${{ env.TERRAGRUNT_PARALLELISM }} \
                --terragrunt-log-level info \
                --auto-approve
              ;;
            *)
              echo "::error::Unknown action: $ACTION"
              exit 1
              ;;
          esac
          
          echo "::notice::Terragrunt operation completed successfully"

  # ==========================================================================
  # PRODUCTION APPROVAL
  # ==========================================================================
  
  production-approval:
    name: Production Deployment Approval
    runs-on: ubuntu-latest
    timeout-minutes: 30
    needs: validate-changes
    if: contains(needs.validate-changes.outputs.changed-environments, 'prod') && github.ref == 'refs/heads/main'
    environment: production  # Security: Require manual approval and protection rules
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Production Deployment Gate
        run: |
          echo "::notice::Production deployment requires manual approval"
          echo "## 🔐 Production Deployment Approval Required" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environments to deploy:** ${{ needs.validate-changes.outputs.changed-environments }}" >> $GITHUB_STEP_SUMMARY
          echo "**Regions to deploy:** ${{ needs.validate-changes.outputs.changed-regions }}" >> $GITHUB_STEP_SUMMARY
          echo "**Components:** ${{ needs.validate-changes.outputs.changed-components }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Security Checks:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "**Cost Analysis:** ✅ Completed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "⚠️ **Manual approval required for production deployment**" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # DEPLOYMENT SUMMARY
  # ==========================================================================
  
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [validate-changes, security-scan, cost-estimation, terragrunt-deploy]
    if: always()
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Generate Summary
        timeout-minutes: 5
        env:
          ACTION_INPUT: ${{ inputs.action }}
        run: |
          echo "::notice::Generating deployment summary"
          
          echo "## 🚀 Terragrunt Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Deployment details with sanitized inputs
          echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger:** ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action:** ${ACTION_INPUT:-plan}" >> $GITHUB_STEP_SUMMARY
          echo "- **Environments:** ${{ needs.validate-changes.outputs.changed-environments }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Regions:** ${{ needs.validate-changes.outputs.changed-regions }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Components:** ${{ needs.validate-changes.outputs.changed-components }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Job statuses with enhanced formatting
          echo "### Job Results" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|----------|" >> $GITHUB_STEP_SUMMARY
          echo "| Validation | ${{ needs.validate-changes.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Cost Estimation | ${{ needs.cost-estimation.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "| Terragrunt Deploy | ${{ needs.terragrunt-deploy.result }} | - |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Security and compliance summary
          echo "### Security & Compliance" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Scan:** ${{ needs.security-scan.result == 'success' && '✅ Passed' || '❌ Issues Found' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Cost Analysis:** ${{ needs.cost-estimation.result == 'success' && '✅ Completed' || '⚠️ Incomplete' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch Protection:** ${{ github.ref == 'refs/heads/main' && '✅ Main Branch' || '⚠️ Feature Branch' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Performance metrics
          echo "### Performance Metrics" >> $GITHUB_STEP_SUMMARY
          TOTAL_ENVS=$(echo '${{ needs.validate-changes.outputs.changed-environments }}' | jq length)
          TOTAL_REGIONS=$(echo '${{ needs.validate-changes.outputs.changed-regions }}' | jq length)
          echo "- **Total Environments:** $TOTAL_ENVS" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Regions:** $TOTAL_REGIONS" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Duration:** Approximately $((GITHUB_JOB_DURATION / 60)) minutes" >> $GITHUB_STEP_SUMMARY
          
      - name: Notification Handler
        if: always()
        env:
          WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          ACTION_INPUT: ${{ inputs.action }}
        run: |
          if [ -n "$WEBHOOK_URL" ]; then
            echo "::notice::Slack webhook configured, would send notification"
            # Note: Slack action removed due to security concerns
            # Consider implementing secure webhook notification here
          else
            echo "::warning::No Slack webhook configured"
          fi
          
          # Future: Implement secure notification system
          echo "::notice::Deployment summary completed"
          echo "::notice::Action: ${ACTION_INPUT:-plan}"
          echo "::notice::Status: ${{ job.status }}"




