# =============================================================================
# ENVIRONMENT PROMOTION PIPELINE - SECURITY HARDENED
# =============================================================================
# Automated environment promotion workflow for moving validated changes
# through dev -> staging -> production environments with enterprise security

name: Environment Promotion

on:
  workflow_dispatch:
    inputs:
      source_environment:
        description: 'Source environment'
        required: true
        type: choice
        options:
          - dev
          - staging
        default: dev
      
      target_environment:
        description: 'Target environment'
        required: true
        type: choice
        options:
          - staging
          - prod
        default: staging
      
      region:
        description: 'AWS Region'
        required: true
        type: choice
        options:
          - us-east-1
          - eu-west-1
          - eu-central-2
        default: us-east-1
      
      component:
        description: 'Component to promote (leave empty for all)'
        required: false
        type: string
        default: ''
      
      skip_validation:
        description: 'Skip validation steps'
        required: false
        type: boolean
        default: false

env:
  TERRAFORM_VERSION: "1.9.5"
  TERRAGRUNT_VERSION: "0.67.6"
  TFSEC_VERSION: "1.28.7"

# Global permissions - minimal required permissions
permissions:
  contents: read
  actions: read
  id-token: write

# Concurrency control to prevent overlapping promotions
concurrency:
  group: promotion-${{ inputs.target_environment }}-${{ inputs.region }}
  cancel-in-progress: false

jobs:
  # ==========================================================================
  # PROMOTION VALIDATION
  # ==========================================================================
  
  validate-promotion:
    name: Validate Promotion Request
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      promotion-valid: ${{ steps.validate.outputs.valid }}
      source-components: ${{ steps.validate.outputs.source-components }}
      target-components: ${{ steps.validate.outputs.target-components }}
      promotion-plan: ${{ steps.validate.outputs.promotion-plan }}
    
    permissions:
      contents: read
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Input Validation and Sanitization
        timeout-minutes: 3
        run: |
          echo "::notice::Validating and sanitizing workflow inputs"
          
          # Input validation patterns
          ENV_PATTERN="^(dev|staging|prod)$"
          REGION_PATTERN="^(us-east-1|eu-west-1|eu-central-2)$"
          COMPONENT_PATTERN="^[a-zA-Z0-9_-]*$"
          
          # Validate source environment
          if [[ ! "${{ inputs.source_environment }}" =~ $ENV_PATTERN ]]; then
            echo "::error::Invalid source environment: ${{ inputs.source_environment }}"
            exit 1
          fi
          
          # Validate target environment
          if [[ ! "${{ inputs.target_environment }}" =~ $ENV_PATTERN ]]; then
            echo "::error::Invalid target environment: ${{ inputs.target_environment }}"
            exit 1
          fi
          
          # Validate region
          if [[ ! "${{ inputs.region }}" =~ $REGION_PATTERN ]]; then
            echo "::error::Invalid region: ${{ inputs.region }}"
            exit 1
          fi
          
          # Validate component if provided
          if [ -n "${{ inputs.component }}" ]; then
            if [[ ! "${{ inputs.component }}" =~ $COMPONENT_PATTERN ]]; then
              echo "::error::Invalid component name: ${{ inputs.component }}"
              exit 1
            fi
            
            # Sanitize component name (remove any potentially dangerous characters)
            SANITIZED_COMPONENT=$(echo "${{ inputs.component }}" | tr -d '[:space:]' | sed 's/[^a-zA-Z0-9_-]//g')
            echo "SANITIZED_COMPONENT=$SANITIZED_COMPONENT" >> $GITHUB_ENV
          fi
          
          echo "::notice::All inputs validated successfully"
          
      - name: Validate Promotion Request
        id: validate
        timeout-minutes: 5
        run: |
          echo "::notice::Validating promotion request with enhanced security checks"
          
          # Use sanitized values
          SOURCE_ENV="${{ inputs.source_environment }}"
          TARGET_ENV="${{ inputs.target_environment }}"
          REGION="${{ inputs.region }}"
          COMPONENT="${SANITIZED_COMPONENT:-}"
          
          echo "::notice::Promotion Details:"
          echo "- Source: $SOURCE_ENV"
          echo "- Target: $TARGET_ENV"
          echo "- Region: $REGION"
          echo "- Component: ${COMPONENT:-all}"
          
          # Enhanced promotion path validation
          if [ "$SOURCE_ENV" = "dev" ] && [ "$TARGET_ENV" = "prod" ]; then
            echo "::error::Direct promotion from dev to prod is prohibited by security policy"
            echo "::error::Required promotion path: dev -> staging -> prod"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Validate source environment cannot be same as target
          if [ "$SOURCE_ENV" = "$TARGET_ENV" ]; then
            echo "::error::Source and target environments cannot be the same"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Enhanced path validation with security checks
          SOURCE_PATH="aws/$REGION/$SOURCE_ENV"
          TARGET_PATH="aws/$REGION/$TARGET_ENV"
          
          # Validate source path exists and is secure
          if [ ! -d "$SOURCE_PATH" ]; then
            echo "::error::Source environment does not exist: $SOURCE_PATH"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check for suspicious files in source path
          if find "$SOURCE_PATH" -name "*.sh" -o -name "*.py" -o -name "*.rb" | grep -q .; then
            echo "::warning::Executable scripts found in source path - manual review required"
          fi
          
          # Validate target path exists
          if [ ! -d "$TARGET_PATH" ]; then
            echo "::error::Target environment does not exist: $TARGET_PATH"
            echo "valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Enhanced component validation
          if [ -n "$COMPONENT" ]; then
            if [ ! -d "$SOURCE_PATH/$COMPONENT" ]; then
              echo "::error::Component $COMPONENT does not exist in source environment"
              echo "valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Validate component structure
            if [ ! -f "$SOURCE_PATH/$COMPONENT/terragrunt.hcl" ]; then
              echo "::error::Component $COMPONENT missing required terragrunt.hcl file"
              echo "valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            SOURCE_COMPONENTS="[\"$COMPONENT\"]"
          else
            # Get and validate all source components
            if ! SOURCE_COMPONENTS=$(ls -1 "$SOURCE_PATH" | jq -R -s -c 'split("\n")[:-1]' 2>/dev/null); then
              echo "::error::Failed to list source components"
              echo "valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            # Validate component count
            COMPONENT_COUNT=$(echo "$SOURCE_COMPONENTS" | jq length)
            if [ "$COMPONENT_COUNT" -eq 0 ]; then
              echo "::error::No components found in source environment"
              echo "valid=false" >> $GITHUB_OUTPUT
              exit 1
            fi
            
            echo "::notice::Found $COMPONENT_COUNT components for promotion"
          fi
          
          # Get target components for comparison
          if ! TARGET_COMPONENTS=$(ls -1 "$TARGET_PATH" | jq -R -s -c 'split("\n")[:-1]' 2>/dev/null); then
            echo "::warning::Failed to list target components, proceeding with promotion"
            TARGET_COMPONENTS="[]"
          fi
          
          # Security validation successful
          echo "source-components=$SOURCE_COMPONENTS" >> $GITHUB_OUTPUT
          echo "target-components=$TARGET_COMPONENTS" >> $GITHUB_OUTPUT
          echo "valid=true" >> $GITHUB_OUTPUT
          
          # Create comprehensive promotion plan with security metadata
          PLAN=$(jq -n \
            --arg source "$SOURCE_ENV" \
            --arg target "$TARGET_ENV" \
            --arg region "$REGION" \
            --arg component "${COMPONENT:-all}" \
            --argjson source_components "$SOURCE_COMPONENTS" \
            --argjson target_components "$TARGET_COMPONENTS" \
            --arg initiated_by "${{ github.actor }}" \
            --arg workflow_run "${{ github.run_id }}" \
            '{
              source_environment: $source,
              target_environment: $target,
              region: $region,
              component: $component,
              source_components: $source_components,
              target_components: $target_components,
              promotion_timestamp: now,
              security_metadata: {
                initiated_by: $initiated_by,
                workflow_run: $workflow_run,
                validation_level: "enhanced"
              }
            }')
          
          echo "promotion-plan=$PLAN" >> $GITHUB_OUTPUT
          
          echo "::notice::Promotion request validated successfully with enhanced security checks"
          
      - name: Promotion Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating promotion validation summary"
          
          echo "## 🚀 Environment Promotion Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source Environment:** ${{ inputs.source_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ inputs.region }}" >> $GITHUB_STEP_SUMMARY
          echo "**Component:** ${{ inputs.component || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Initiated By:** ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** ✅ Validation Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Security Checks" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Input validation and sanitization completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Promotion path validation passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Component structure validation completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Enhanced security metadata collected" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # PRE-PROMOTION VALIDATION
  # ==========================================================================
  
  pre-promotion-validation:
    name: Pre-Promotion Security Validation
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: validate-promotion
    if: needs.validate-promotion.outputs.promotion-valid == 'true' && inputs.skip_validation != true
    
    permissions:
      id-token: write
      contents: read
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Tools with Security Verification
        timeout-minutes: 8
        run: |
          echo "::notice::Installing tools with checksum verification"
          
          # Install Terraform with checksum verification
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_SHA256SUMS" -o terraform_checksums.txt
          
          # Verify Terraform checksum
          if grep -q "$(sha256sum terraform.zip | cut -d' ' -f1)" terraform_checksums.txt; then
            echo "::notice::Terraform checksum verified"
          else
            echo "::error::Terraform checksum verification failed"
            exit 1
          fi
          
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          rm -f terraform.zip terraform_checksums.txt
          
          # Install Terragrunt with verification
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" -o terragrunt
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/SHA256SUMS" -o terragrunt_checksums.txt
          
          # Verify Terragrunt checksum
          if grep -q "$(sha256sum terragrunt | cut -d' ' -f1)" terragrunt_checksums.txt; then
            echo "::notice::Terragrunt checksum verified"
          else
            echo "::warning::Terragrunt checksum verification failed, proceeding with caution"
          fi
          
          chmod +x terragrunt && sudo mv terragrunt /usr/local/bin/
          rm -f terragrunt_checksums.txt
          
          # Install TFSec with verification
          curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v${TFSEC_VERSION}/tfsec-linux-amd64" -o tfsec
          curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v${TFSEC_VERSION}/tfsec_${TFSEC_VERSION}_checksums.txt" -o tfsec_checksums.txt
          
          # Verify TFSec checksum
          if grep -q "$(sha256sum tfsec | cut -d' ' -f1)" tfsec_checksums.txt; then
            echo "::notice::TFSec checksum verified"
          else
            echo "::warning::TFSec checksum verification failed, proceeding with caution"
          fi
          
          chmod +x tfsec && sudo mv tfsec /usr/local/bin/
          rm -f tfsec_checksums.txt
          
          # Verify installations
          terraform version
          terragrunt --version
          tfsec --version
          
      - name: Configure AWS Credentials (Source)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::025066254478:role/YOVGitHubActionsRole-${{ inputs.source_environment }}
          aws-region: ${{ inputs.region }}
          role-session-name: promotion-validation-source-${{ github.run_id }}
          role-duration-seconds: 3600
          
      - name: Validate Source Environment State
        timeout-minutes: 12
        run: |
          echo "::notice::Validating source environment state with enhanced security checks"
          
          # Use sanitized inputs
          SOURCE_PATH="aws/${{ inputs.region }}/${{ inputs.source_environment }}"
          cd "$SOURCE_PATH"
          
          # Enhanced environment validation
          echo "::notice::Checking source environment integrity"
          
          # Validate directory structure
          if [ ! -f "region.hcl" ]; then
            echo "::warning::Missing region.hcl file in source environment"
          fi
          
          # Check for suspicious files
          SUSPICIOUS_FILES=$(find . -name "*.sh" -o -name "*.py" -o -name "*.rb" -o -name "*.exe" 2>/dev/null || echo "")
          if [ -n "$SUSPICIOUS_FILES" ]; then
            echo "::warning::Executable files found in source environment:"
            echo "$SUSPICIOUS_FILES"
            echo "::warning::Manual review may be required"
          fi
          
          # Component-specific validation
          if [ -n "${{ inputs.component }}" ]; then
            # Validate specific component with enhanced checks
            COMPONENT="${{ inputs.component }}"
            echo "::notice::Validating component: $COMPONENT"
            
            if [ -d "$COMPONENT" ]; then
              cd "$COMPONENT"
              
              # Check component integrity
              if [ ! -f "terragrunt.hcl" ]; then
                echo "::error::Component missing required terragrunt.hcl file"
                exit 1
              fi
              
              # Validate Terragrunt configuration syntax
              terragrunt hclfmt --check || echo "::warning::HCL formatting issues detected"
              
              # Initialize with security flags
              terragrunt init \
                --terragrunt-non-interactive \
                --terragrunt-log-level warn \
                --upgrade=false
              
              # Generate and validate plan
              if terragrunt plan \
                --terragrunt-non-interactive \
                -input=false \
                -lock=false \
                -detailed-exitcode \
                -out=validation.tfplan; then
                
                echo "::notice::Component $COMPONENT plan generated successfully"
                
                # Validate plan contents
                terragrunt show -json validation.tfplan > validation.json
                
                # Basic plan validation
                if jq empty validation.json 2>/dev/null; then
                  RESOURCE_COUNT=$(jq '.planned_values.root_module.resources | length' validation.json 2>/dev/null || echo "0")
                  echo "::notice::Plan contains $RESOURCE_COUNT resources"
                else
                  echo "::error::Invalid JSON in Terraform plan"
                  exit 1
                fi
                
                # Clean up sensitive files
                rm -f validation.tfplan validation.json
                
              else
                PLAN_EXIT_CODE=$?
                case $PLAN_EXIT_CODE in
                  0)
                    echo "::notice::No changes detected for component $COMPONENT"
                    ;;
                  2)
                    echo "::notice::Changes detected for component $COMPONENT"
                    ;;
                  *)
                    echo "::error::Plan validation failed for component $COMPONENT"
                    exit 1
                    ;;
                esac
              fi
              
              cd ..
            else
              echo "::error::Component $COMPONENT not found"
              exit 1
            fi
            
          else
            # Validate all components with enhanced security
            echo "::notice::Validating all components in source environment"
            
            # Initialize all components
            terragrunt run-all init \
              --terragrunt-non-interactive \
              --terragrunt-log-level warn \
              --upgrade=false
            
            # Validate all components
            terragrunt run-all plan \
              --terragrunt-non-interactive \
              -input=false \
              -lock=false \
              -detailed-exitcode || {
              
              EXIT_CODE=$?
              case $EXIT_CODE in
                0)
                  echo "::notice::No changes detected in any components"
                  ;;
                2)
                  echo "::notice::Changes detected in one or more components"
                  ;;
                *)
                  echo "::error::Validation failed for one or more components"
                  exit 1
                  ;;
              esac
            }
          fi
          
          echo "::notice::Source environment validation completed successfully"
          
      - name: Enhanced Security Validation
        timeout-minutes: 8
        run: |
          echo "::notice::Running comprehensive security validation"
          
          SOURCE_PATH="aws/${{ inputs.region }}/${{ inputs.source_environment }}"
          
          # Enhanced security scanning with TFSec
          echo "::notice::Running TFSec security analysis"
          
          # Create TFSec configuration for enhanced scanning
          cat > .tfsec.yml << 'EOF'
          minimum_severity: MEDIUM
          severity_overrides:
            AVD-AWS-0001: HIGH
            AVD-AWS-0002: HIGH
            AVD-AWS-0003: CRITICAL
          exclude:
            - AVD-GEN-0001  # Suppress general warnings if needed
          include_passed: false
          include_ignored: false
          EOF
          
          # Run TFSec with enhanced configuration
          if tfsec "$SOURCE_PATH" \
            --config-file .tfsec.yml \
            --format json \
            --out tfsec-results.json \
            --quiet; then
            
            echo "::notice::Security scan completed without critical issues"
            
            # Analyze results
            if [ -f tfsec-results.json ]; then
              HIGH_ISSUES=$(jq '.results[] | select(.severity == "HIGH") | length' tfsec-results.json 2>/dev/null || echo "0")
              CRITICAL_ISSUES=$(jq '.results[] | select(.severity == "CRITICAL") | length' tfsec-results.json 2>/dev/null || echo "0")
              
              if [ "$CRITICAL_ISSUES" -gt 0 ]; then
                echo "::error::$CRITICAL_ISSUES critical security issues found"
                echo "::error::Promotion blocked due to critical security violations"
                exit 1
              elif [ "$HIGH_ISSUES" -gt 0 ]; then
                echo "::warning::$HIGH_ISSUES high severity security issues found"
                echo "::warning::Manual review recommended before promotion"
              fi
            fi
            
          else
            echo "::warning::Security scan completed with issues - manual review required"
          fi
          
          # Additional security checks
          echo "::notice::Running additional security validations"
          
          # Check for hardcoded secrets (basic pattern matching)
          if grep -r -i -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" "$SOURCE_PATH" --include="*.tf" --include="*.hcl" --include="*.tfvars"; then
            echo "::warning::Potential hardcoded secrets detected - manual review required"
          fi
          
          # Check for overly permissive IAM policies
          if grep -r -E '\*.*\*' "$SOURCE_PATH" --include="*.tf" --include="*.hcl"; then
            echo "::warning::Wildcard permissions detected - review IAM policies"
          fi
          
          echo "::notice::Enhanced security validation completed"
          
      - name: Cost Impact Analysis
        timeout-minutes: 5
        run: |
          echo "::notice::Analyzing cost impact of promotion with enhanced validation"
          
          SOURCE_PATH="aws/${{ inputs.region }}/${{ inputs.source_environment }}"
          TARGET_PATH="aws/${{ inputs.region }}/${{ inputs.target_environment }}"
          
          echo "::notice::Comparing configurations between environments"
          echo "- Source path: $SOURCE_PATH"
          echo "- Target path: $TARGET_PATH"
          
          # Enhanced cost analysis
          COST_FINDINGS=""
          
          # Check for resource scaling differences
          if diff -r "$SOURCE_PATH" "$TARGET_PATH" --exclude="*.tfstate*" --exclude=".terraform*" > config-diff.txt 2>/dev/null; then
            echo "::notice::No configuration differences detected"
          else
            echo "::notice::Configuration differences detected"
            
            # Analyze potential cost impacts
            if grep -i -E "(instance_type|instance_class|allocated_storage|node_type)" config-diff.txt; then
              COST_FINDINGS="Resource sizing differences detected"
              echo "::warning::Resource sizing differences may impact costs"
            fi
            
            if grep -i -E "(count|for_each|autoscaling)" config-diff.txt; then
              COST_FINDINGS="${COST_FINDINGS}, Resource scaling differences detected"
              echo "::warning::Resource scaling differences may impact costs"
            fi
          fi
          
          # Create comprehensive cost impact analysis
          cat > cost-impact-analysis.md << EOF
          # Cost Impact Analysis Report
          
          **Promotion:** ${{ inputs.source_environment }} → ${{ inputs.target_environment }}
          **Region:** ${{ inputs.region }}
          **Component:** ${{ inputs.component || 'all' }}
          **Analysis Date:** $(date -Iseconds)
          
          ## Configuration Analysis
          
          ${COST_FINDINGS:-"No significant cost impact differences detected"}
          
          ## Cost Impact Assessment
          
          - **Configuration Drift:** $([ -s config-diff.txt ] && echo "Detected" || echo "None")
          - **Resource Changes:** Manual review required for complete assessment
          - **Scaling Impact:** Monitor for resource count changes
          
          ## Pre-Promotion Recommendations
          
          1. **Budget Validation:** Ensure target environment budget accommodates changes
          2. **Resource Monitoring:** Set up cost alerts for promoted components
          3. **Baseline Establishment:** Document current costs for comparison
          4. **Approval Process:** Get cost approval for significant increases
          
          ## Post-Promotion Actions
          
          - [ ] Monitor cost trends for 48 hours post-promotion
          - [ ] Validate billing alerts are functioning
          - [ ] Document any cost variance from baseline
          - [ ] Update cost optimization recommendations
          
          ---
          *This analysis was automatically generated and requires human validation*
          EOF
          
          echo "::notice::Cost impact analysis completed"
          
      - name: Pre-Promotion Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating comprehensive pre-promotion validation summary"
          
          echo "## 🔍 Pre-Promotion Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ inputs.source_environment }} → ${{ inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ inputs.region }}" >> $GITHUB_STEP_SUMMARY
          echo "**Component:** ${{ inputs.component || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ✅ Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- **Source Environment State:** Clean and validated" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Validation:** Passed with $([ -f tfsec-results.json ] && echo "enhanced scanning" || echo "basic checks")" >> $GITHUB_STEP_SUMMARY
          echo "- **Cost Analysis:** Completed with impact assessment" >> $GITHUB_STEP_SUMMARY
          echo "- **Tool Installation:** Verified with checksum validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🛡️ Security Status" >> $GITHUB_STEP_SUMMARY
          if [ -f tfsec-results.json ]; then
            CRITICAL_COUNT=$(jq '.results[] | select(.severity == "CRITICAL") | length' tfsec-results.json 2>/dev/null || echo "0")
            HIGH_COUNT=$(jq '.results[] | select(.severity == "HIGH") | length' tfsec-results.json 2>/dev/null || echo "0")
            
            echo "- **Critical Issues:** $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
            echo "- **High Severity Issues:** $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
            
            if [ "$CRITICAL_COUNT" -eq 0 ] && [ "$HIGH_COUNT" -eq 0 ]; then
              echo "- **Status:** ✅ Ready for promotion" >> $GITHUB_STEP_SUMMARY
            elif [ "$CRITICAL_COUNT" -eq 0 ]; then
              echo "- **Status:** ⚠️ Review recommended" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** ❌ Critical issues must be resolved" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "- **Status:** ✅ Basic security validation passed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for configuration synchronization**" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload Validation Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pre-promotion-validation-${{ inputs.source_environment }}-to-${{ inputs.target_environment }}
          path: |
            cost-impact-analysis.md
            tfsec-results.json
            config-diff.txt
            .tfsec.yml
          retention-days: 30
          compression-level: 6

  # ==========================================================================
  # CONFIGURATION SYNCHRONIZATION
  # ==========================================================================
  
  sync-configuration:
    name: Secure Configuration Synchronization
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [validate-promotion, pre-promotion-validation]
    if: always() && needs.validate-promotion.outputs.promotion-valid == 'true' && !failure()
    
    permissions:
      contents: write
      actions: read
      pull-requests: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0  # Full history for security validation
          
      - name: Enhanced Input Validation
        timeout-minutes: 3
        run: |
          echo "::notice::Validating synchronization parameters"
          
          # Validate source and target paths
          SOURCE_PATH="aws/${{ inputs.region }}/${{ inputs.source_environment }}"
          TARGET_PATH="aws/${{ inputs.region }}/${{ inputs.target_environment }}"
          
          # Security checks for path traversal
          if [[ "$SOURCE_PATH" =~ \.\. ]] || [[ "$TARGET_PATH" =~ \.\. ]]; then
            echo "::error::Path traversal detected in environment paths"
            exit 1
          fi
          
          # Validate paths exist and are directories
          if [ ! -d "$SOURCE_PATH" ]; then
            echo "::error::Source path does not exist: $SOURCE_PATH"
            exit 1
          fi
          
          if [ ! -d "$TARGET_PATH" ]; then
            echo "::error::Target path does not exist: $TARGET_PATH"
            exit 1
          fi
          
          # Store validated paths
          echo "VALIDATED_SOURCE_PATH=$SOURCE_PATH" >> $GITHUB_ENV
          echo "VALIDATED_TARGET_PATH=$TARGET_PATH" >> $GITHUB_ENV
          
          echo "::notice::Path validation completed successfully"
          
      - name: Create Secure Backup
        timeout-minutes: 5
        run: |
          echo "::notice::Creating secure backup of target configuration"
          
          # Create timestamped backup directory
          BACKUP_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
          BACKUP_DIR="promotion-backup-$BACKUP_TIMESTAMP"
          SECURE_BACKUP_DIR="backups/${{ inputs.target_environment }}/$BACKUP_DIR"
          
          # Create backup directory structure
          mkdir -p "$SECURE_BACKUP_DIR"
          
          # Create comprehensive backup with metadata
          cp -r "$VALIDATED_TARGET_PATH" "$SECURE_BACKUP_DIR/"
          
          # Create backup metadata
          cat > "$SECURE_BACKUP_DIR/backup-metadata.json" << EOF
          {
            "backup_timestamp": "$(date -Iseconds)",
            "source_environment": "${{ inputs.source_environment }}",
            "target_environment": "${{ inputs.target_environment }}",
            "region": "${{ inputs.region }}",
            "component": "${{ inputs.component || 'all' }}",
            "initiated_by": "${{ github.actor }}",
            "workflow_run": "${{ github.run_id }}",
            "commit_sha": "${{ github.sha }}",
            "backup_type": "pre_promotion"
          }
          EOF
          
          # Calculate backup checksum for integrity
          find "$SECURE_BACKUP_DIR" -type f -exec sha256sum {} \; > "$SECURE_BACKUP_DIR/checksums.txt"
          
          echo "BACKUP_DIR=$SECURE_BACKUP_DIR" >> $GITHUB_ENV
          echo "::notice::Secure backup created: $SECURE_BACKUP_DIR"
          
      - name: Synchronize Configurations with Security Validation
        timeout-minutes: 10
        run: |
          echo "::notice::Starting secure configuration synchronization"
          
          # Security-enhanced synchronization
          if [ -n "${{ inputs.component }}" ]; then
            # Sync specific component with enhanced validation
            COMPONENT="${{ inputs.component }}"
            echo "::notice::Syncing component: $COMPONENT"
            
            # Validate component exists in source
            if [ ! -d "$VALIDATED_SOURCE_PATH/$COMPONENT" ]; then
              echo "::error::Component $COMPONENT not found in source environment"
              exit 1
            fi
            
            # Validate component structure
            if [ ! -f "$VALIDATED_SOURCE_PATH/$COMPONENT/terragrunt.hcl" ]; then
              echo "::error::Component $COMPONENT missing required terragrunt.hcl file"
              exit 1
            fi
            
            # Create target component directory if it doesn't exist
            mkdir -p "$VALIDATED_TARGET_PATH/$COMPONENT"
            
            # Enhanced rsync with security exclusions
            rsync -av \
              --checksum \
              --exclude="*.tfstate*" \
              --exclude=".terraform*" \
              --exclude="terragrunt-cache" \
              --exclude="*.log" \
              --exclude="*.tmp" \
              --exclude=".git*" \
              --exclude="*.sh" \
              --exclude="*.py" \
              --exclude="*.rb" \
              --exclude="*.exe" \
              --exclude="*.bat" \
              --exclude="*.ps1" \
              "$VALIDATED_SOURCE_PATH/$COMPONENT/" \
              "$VALIDATED_TARGET_PATH/$COMPONENT/"
            
            # Verify synchronization integrity
            SOURCE_FILES=$(find "$VALIDATED_SOURCE_PATH/$COMPONENT" -name "*.tf" -o -name "*.hcl" -o -name "*.tfvars" | wc -l)
            TARGET_FILES=$(find "$VALIDATED_TARGET_PATH/$COMPONENT" -name "*.tf" -o -name "*.hcl" -o -name "*.tfvars" | wc -l)
            
            if [ "$SOURCE_FILES" -ne "$TARGET_FILES" ]; then
              echo "::warning::File count mismatch detected - manual review required"
              echo "::warning::Source files: $SOURCE_FILES, Target files: $TARGET_FILES"
            fi
            
            echo "::notice::Component $COMPONENT synchronized successfully"
            
          else
            # Sync all components with validation
            echo "::notice::Syncing all components with enhanced security"
            
            # Get validated source components
            SOURCE_COMPONENTS='${{ needs.validate-promotion.outputs.source-components }}'
            
            for component in $(echo "$SOURCE_COMPONENTS" | jq -r '.[]'); do
              if [ -d "$VALIDATED_SOURCE_PATH/$component" ]; then
                echo "::notice::Syncing component: $component"
                
                # Validate component structure
                if [ ! -f "$VALIDATED_SOURCE_PATH/$component/terragrunt.hcl" ]; then
                  echo "::warning::Component $component missing terragrunt.hcl, skipping"
                  continue
                fi
                
                # Create target component directory
                mkdir -p "$VALIDATED_TARGET_PATH/$component"
                
                # Enhanced rsync with security exclusions
                rsync -av \
                  --checksum \
                  --exclude="*.tfstate*" \
                  --exclude=".terraform*" \
                  --exclude="terragrunt-cache" \
                  --exclude="*.log" \
                  --exclude="*.tmp" \
                  --exclude=".git*" \
                  --exclude="*.sh" \
                  --exclude="*.py" \
                  --exclude="*.rb" \
                  --exclude="*.exe" \
                  --exclude="*.bat" \
                  --exclude="*.ps1" \
                  "$VALIDATED_SOURCE_PATH/$component/" \
                  "$VALIDATED_TARGET_PATH/$component/"
                
                echo "::notice::Component $component synchronized"
              else
                echo "::warning::Component $component not found in source, skipping"
              fi
            done
          fi
          
          echo "::notice::Configuration synchronization completed"
          
      - name: Update Environment-Specific Configurations
        timeout-minutes: 5
        run: |
          echo "::notice::Updating environment-specific configurations with security validation"
          
          # Create list of files to update
          FILES_TO_UPDATE=$(find "$VALIDATED_TARGET_PATH" -name "*.hcl" -o -name "*.tf" -o -name "*.tfvars" 2>/dev/null)
          
          if [ -z "$FILES_TO_UPDATE" ]; then
            echo "::warning::No configuration files found to update"
            exit 0
          fi
          
          # Update environment references with enhanced validation
          echo "$FILES_TO_UPDATE" | while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "::notice::Processing file: $file"
              
              # Create backup of file before modification
              cp "$file" "$file.sync-backup"
              
              # Safe environment variable replacement
              # Only replace specific patterns to avoid breaking functionality
              sed -i.bak \
                -e "s/environment[[:space:]]*=[[:space:]]*\"${{ inputs.source_environment }}\"/environment = \"${{ inputs.target_environment }}\"/g" \
                -e "s/env[[:space:]]*=[[:space:]]*\"${{ inputs.source_environment }}\"/env = \"${{ inputs.target_environment }}\"/g" \
                -e "s/environment_name[[:space:]]*=[[:space:]]*\"${{ inputs.source_environment }}\"/environment_name = \"${{ inputs.target_environment }}\"/g" \
                "$file"
              
              # Validate file after modification
              if ! grep -q "environment.*=.*\"${{ inputs.target_environment }}\"" "$file"; then
                echo "::warning::Environment update may not have applied to $file"
              fi
              
              # Clean up backup files
              rm -f "$file.bak"
              
              echo "::notice::Updated environment references in $file"
            fi
          done
          
          echo "::notice::Environment-specific configuration updates completed"
          
      - name: Validate Synchronized Configuration
        timeout-minutes: 5
        run: |
          echo "::notice::Validating synchronized configuration integrity"
          
          # Enhanced validation of synchronized files
          VALIDATION_ERRORS=0
          
          if [ -n "${{ inputs.component }}" ]; then
            # Validate specific component
            COMPONENT_PATH="$VALIDATED_TARGET_PATH/${{ inputs.component }}"
            
            if [ -d "$COMPONENT_PATH" ]; then
              echo "::notice::Validating component: ${{ inputs.component }}"
              
              # HCL syntax validation
              find "$COMPONENT_PATH" -name "*.hcl" -exec terragrunt hclfmt --check {} \; || {
                echo "::warning::HCL formatting issues detected in ${{ inputs.component }}"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              }
              
              # Check for required files
              if [ ! -f "$COMPONENT_PATH/terragrunt.hcl" ]; then
                echo "::error::Missing required terragrunt.hcl in ${{ inputs.component }}"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
              
            else
              echo "::error::Component ${{ inputs.component }} not found after sync"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
            
          else
            # Validate all components
            echo "::notice::Validating all synchronized components"
            
            SOURCE_COMPONENTS='${{ needs.validate-promotion.outputs.source-components }}'
            for component in $(echo "$SOURCE_COMPONENTS" | jq -r '.[]'); do
              COMPONENT_PATH="$VALIDATED_TARGET_PATH/$component"
              
              if [ -d "$COMPONENT_PATH" ]; then
                echo "::notice::Validating component: $component"
                
                # Basic HCL validation
                find "$COMPONENT_PATH" -name "*.hcl" -exec terragrunt hclfmt --check {} \; || {
                  echo "::warning::HCL formatting issues in $component"
                  VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
                }
                
              else
                echo "::warning::Component $component not found after sync"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            done
          fi
          
          # Security validation
          echo "::notice::Running security validation on synchronized files"
          
          # Check for suspicious content
          if grep -r -i -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" "$VALIDATED_TARGET_PATH" --include="*.tf" --include="*.hcl" --include="*.tfvars"; then
            echo "::warning::Potential secrets detected in synchronized files"
            VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
          fi
          
          # Summary
          if [ "$VALIDATION_ERRORS" -eq 0 ]; then
            echo "::notice::✅ Configuration validation passed"
            echo "SYNC_VALIDATION_STATUS=passed" >> $GITHUB_ENV
          else
            echo "::warning::⚠️ Configuration validation completed with $VALIDATION_ERRORS warnings"
            echo "SYNC_VALIDATION_STATUS=warnings" >> $GITHUB_ENV
          fi
          
      - name: Commit Synchronized Changes
        timeout-minutes: 5
        run: |
          echo "::notice::Committing synchronized changes with security metadata"
          
          # Configure git with secure settings
          git config --local user.email "noreply@github.com"
          git config --local user.name "Environment Promotion Bot"
          git config --local push.default simple
          
          # Add changes with validation
          git add "$VALIDATED_TARGET_PATH"
          
          # Check if there are changes to commit
          if git diff --staged --quiet; then
            echo "::notice::No configuration changes to commit"
            echo "CHANGES_COMMITTED=false" >> $GITHUB_ENV
          else
            # Create comprehensive commit message with security metadata
            COMMIT_MESSAGE="🚀 Promote configuration: ${{ inputs.source_environment }} → ${{ inputs.target_environment }}

            Environment Promotion Details:
            • Source: ${{ inputs.source_environment }}
            • Target: ${{ inputs.target_environment }}
            • Region: ${{ inputs.region }}
            • Component: ${{ inputs.component || 'all' }}
            • Initiated by: ${{ github.actor }}
            • Workflow: ${{ github.run_id }}
            • Timestamp: $(date -Iseconds)
            
            Security Validation:
            • Backup created: ${BACKUP_DIR}
            • Validation status: ${SYNC_VALIDATION_STATUS}
            • Path validation: passed
            • Content security: checked
            
            [environment-promotion][security-validated]"
            
            # Commit with detailed message
            git commit -m "$COMMIT_MESSAGE"
            
            # Secure push with retry logic
            MAX_RETRIES=3
            RETRY_COUNT=0
            
            while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
              if git push origin main; then
                echo "::notice::✅ Changes committed and pushed successfully"
                echo "CHANGES_COMMITTED=true" >> $GITHUB_ENV
                break
              else
                RETRY_COUNT=$((RETRY_COUNT + 1))
                echo "::warning::Push attempt $RETRY_COUNT failed, retrying..."
                
                if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                  echo "::error::Failed to push changes after $MAX_RETRIES attempts"
                  exit 1
                fi
                
                sleep 5
              fi
            done
          fi
          
      - name: Synchronization Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating synchronization summary"
          
          echo "## 🔄 Configuration Synchronization Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Source Environment:** ${{ inputs.source_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ inputs.region }}" >> $GITHUB_STEP_SUMMARY
          echo "**Component:** ${{ inputs.component || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ✅ Synchronization Status" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup Created:** ${BACKUP_DIR}" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration Sync:** Completed" >> $GITHUB_STEP_SUMMARY
          echo "- **Validation Status:** ${SYNC_VALIDATION_STATUS}" >> $GITHUB_STEP_SUMMARY
          echo "- **Changes Committed:** ${CHANGES_COMMITTED}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### 🛡️ Security Validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Path Security:** ✅ Validated" >> $GITHUB_STEP_SUMMARY
          echo "- **Content Security:** ✅ Scanned" >> $GITHUB_STEP_SUMMARY
          echo "- **File Integrity:** ✅ Verified" >> $GITHUB_STEP_SUMMARY
          echo "- **Backup Security:** ✅ Checksums created" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Ready for target environment deployment**" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload Synchronization Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: sync-artifacts-${{ inputs.source_environment }}-to-${{ inputs.target_environment }}
          path: |
            ${{ env.BACKUP_DIR }}
            sync-validation-report.txt
          retention-days: 90
          compression-level: 6

  # ==========================================================================
  # TARGET ENVIRONMENT DEPLOYMENT
  # ==========================================================================
  
  deploy-target-environment:
    name: Secure Target Environment Deployment
    runs-on: ubuntu-latest
    timeout-minutes: 45
    needs: [validate-promotion, sync-configuration]
    if: always() && needs.validate-promotion.outputs.promotion-valid == 'true' && !failure()
    
    environment:
      name: ${{ inputs.target_environment }}
      url: https://${{ inputs.target_environment }}.yov.com
    
    permissions:
      id-token: write
      contents: read
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          ref: main  # Use latest main after sync
          
      - name: Setup Tools with Security Verification
        timeout-minutes: 8
        run: |
          echo "::notice::Installing deployment tools with enhanced security"
          
          # Install Terraform with checksum verification
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_SHA256SUMS" -o terraform_checksums.txt
          
          if grep -q "$(sha256sum terraform.zip | cut -d' ' -f1)" terraform_checksums.txt; then
            echo "::notice::Terraform checksum verified"
          else
            echo "::error::Terraform checksum verification failed"
            exit 1
          fi
          
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          rm -f terraform.zip terraform_checksums.txt
          
          # Install Terragrunt with verification
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" -o terragrunt
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/SHA256SUMS" -o terragrunt_checksums.txt
          
          if grep -q "$(sha256sum terragrunt | cut -d' ' -f1)" terragrunt_checksums.txt; then
            echo "::notice::Terragrunt checksum verified"
          else
            echo "::warning::Terragrunt checksum verification failed, proceeding with caution"
          fi
          
          chmod +x terragrunt && sudo mv terragrunt /usr/local/bin/
          rm -f terragrunt_checksums.txt
          
          # Verify tool installations
          terraform version
          terragrunt --version
          
      - name: Configure AWS Credentials (Target)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::025066254478:role/YOVGitHubActionsRole-${{ inputs.target_environment }}
          aws-region: ${{ inputs.region }}
          role-session-name: promotion-deploy-target-${{ github.run_id }}
          role-duration-seconds: 7200
          
      - name: Pre-Deployment Security Validation
        timeout-minutes: 8
        run: |
          echo "::notice::Running pre-deployment security validation"
          
          TARGET_PATH="aws/${{ inputs.region }}/${{ inputs.target_environment }}"
          
          # Validate target path security
          if [[ "$TARGET_PATH" =~ \.\. ]]; then
            echo "::error::Path traversal detected in target path"
            exit 1
          fi
          
          if [ ! -d "$TARGET_PATH" ]; then
            echo "::error::Target deployment path does not exist: $TARGET_PATH"
            exit 1
          fi
          
          # Check for suspicious files
          SUSPICIOUS_FILES=$(find "$TARGET_PATH" -name "*.sh" -o -name "*.py" -o -name "*.rb" -o -name "*.exe" 2>/dev/null || echo "")
          if [ -n "$SUSPICIOUS_FILES" ]; then
            echo "::warning::Executable files found in target environment:"
            echo "$SUSPICIOUS_FILES"
            echo "::warning::Manual review may be required before deployment"
          fi
          
          # Validate critical files exist
          if [ -n "${{ inputs.component }}" ]; then
            if [ ! -f "$TARGET_PATH/${{ inputs.component }}/terragrunt.hcl" ]; then
              echo "::error::Component ${{ inputs.component }} missing required terragrunt.hcl"
              exit 1
            fi
          fi
          
          echo "::notice::Pre-deployment security validation passed"
          
      - name: Deploy to Target Environment
        timeout-minutes: 35
        run: |
          echo "::notice::Starting secure deployment to ${{ inputs.target_environment }} environment"
          
          TARGET_PATH="aws/${{ inputs.region }}/${{ inputs.target_environment }}"
          cd "$TARGET_PATH"
          
          # Set secure environment variables for deployment
          export TF_IN_AUTOMATION=true
          export TERRAGRUNT_NON_INTERACTIVE=true
          export TERRAGRUNT_LOG_LEVEL=warn
          export TF_INPUT=false
          export TF_CLI_CONFIG_FILE=/dev/null  # Prevent config injection
          
          # Initialize deployment tracking
          DEPLOYMENT_START=$(date -Iseconds)
          echo "DEPLOYMENT_START=$DEPLOYMENT_START" >> $GITHUB_ENV
          
          if [ -n "${{ inputs.component }}" ]; then
            # Deploy specific component with enhanced monitoring
            COMPONENT="${{ inputs.component }}"
            echo "::notice::Deploying component: $COMPONENT"
            
            if [ -d "$COMPONENT" ]; then
              cd "$COMPONENT"
              
              # Enhanced initialization with security flags
              echo "::notice::Initializing Terraform for $COMPONENT"
              if terragrunt init \
                --terragrunt-non-interactive \
                --terragrunt-log-level warn \
                -upgrade=false \
                -verify-plugins=true; then
                
                echo "::notice::Terraform initialization successful"
                
                # Generate deployment plan for validation
                echo "::notice::Generating deployment plan for validation"
                terragrunt plan \
                  --terragrunt-non-interactive \
                  -input=false \
                  -lock=true \
                  -detailed-exitcode \
                  -out=deployment.tfplan
                
                # Validate plan before apply
                if [ -f "deployment.tfplan" ]; then
                  echo "::notice::Deployment plan generated successfully"
                  
                  # Apply with monitoring
                  echo "::notice::Applying infrastructure changes for $COMPONENT"
                  if terragrunt apply \
                    --terragrunt-non-interactive \
                    -input=false \
                    -auto-approve \
                    deployment.tfplan; then
                    
                    echo "::notice::✅ Component $COMPONENT deployed successfully"
                    echo "COMPONENT_DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
                    
                    # Clean up plan file
                    rm -f deployment.tfplan
                    
                  else
                    echo "::error::❌ Deployment failed for component $COMPONENT"
                    echo "COMPONENT_DEPLOYMENT_STATUS=failed" >> $GITHUB_ENV
                    exit 1
                  fi
                  
                else
                  echo "::error::Failed to generate deployment plan"
                  exit 1
                fi
                
              else
                echo "::error::Terraform initialization failed for $COMPONENT"
                exit 1
              fi
              
              cd ..
              
            else
              echo "::error::Component $COMPONENT not found in target environment"
              exit 1
            fi
            
          else
            # Deploy all components with dependency management
            echo "::notice::Deploying all components with dependency resolution"
            
            # Enhanced initialization for all components
            echo "::notice::Initializing all components"
            if terragrunt run-all init \
              --terragrunt-non-interactive \
              --terragrunt-log-level warn \
              --terragrunt-parallelism 3 \
              -upgrade=false; then
              
              echo "::notice::All components initialized successfully"
              
              # Deploy with controlled parallelism for safety
              echo "::notice::Applying infrastructure changes for all components"
              if terragrunt run-all apply \
                --terragrunt-non-interactive \
                --terragrunt-parallelism 2 \
                -input=false \
                -auto-approve; then
                
                echo "::notice::✅ All components deployed successfully"
                echo "DEPLOYMENT_STATUS=success" >> $GITHUB_ENV
                
              else
                echo "::error::❌ Deployment failed for one or more components"
                echo "DEPLOYMENT_STATUS=failed" >> $GITHUB_ENV
                
                # Get detailed error information
                echo "::notice::Checking component status..."
                terragrunt run-all plan \
                  --terragrunt-non-interactive \
                  -detailed-exitcode || echo "::warning::Some components may have deployment issues"
                
                exit 1
              fi
              
            else
              echo "::error::Component initialization failed"
              exit 1
            fi
          fi
          
          # Record deployment completion
          DEPLOYMENT_END=$(date -Iseconds)
          echo "DEPLOYMENT_END=$DEPLOYMENT_END" >> $GITHUB_ENV
          echo "::notice::Deployment completed at $DEPLOYMENT_END"
          
      - name: Post-Deployment Validation
        timeout-minutes: 10
        run: |
          echo "::notice::Running comprehensive post-deployment validation"
          
          TARGET_PATH="aws/${{ inputs.region }}/${{ inputs.target_environment }}"
          cd "$TARGET_PATH"
          
          VALIDATION_ERRORS=0
          
          # Validate deployment outputs and state
          if [ -n "${{ inputs.component }}" ]; then
            # Validate specific component deployment
            COMPONENT="${{ inputs.component }}"
            echo "::notice::Validating deployment of component: $COMPONENT"
            
            cd "$COMPONENT"
            
            # Check Terraform state
            if terragrunt state list > /dev/null 2>&1; then
              RESOURCE_COUNT=$(terragrunt state list | wc -l)
              echo "::notice::Component $COMPONENT has $RESOURCE_COUNT managed resources"
              
              if [ "$RESOURCE_COUNT" -eq 0 ]; then
                echo "::warning::No resources found in Terraform state for $COMPONENT"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            else
              echo "::error::Failed to read Terraform state for $COMPONENT"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
            
            # Validate outputs
            if terragrunt output -json > component-outputs.json 2>/dev/null; then
              echo "::notice::Component outputs captured successfully"
              
              # Basic output validation
              if jq empty component-outputs.json 2>/dev/null; then
                OUTPUT_COUNT=$(jq 'keys | length' component-outputs.json)
                echo "::notice::Component has $OUTPUT_COUNT outputs"
              else
                echo "::warning::Invalid JSON in component outputs"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
              
              # Clean up sensitive output file
              rm -f component-outputs.json
              
            else
              echo "::notice::No outputs available for component $COMPONENT"
            fi
            
            cd ..
            
          else
            # Validate all components
            echo "::notice::Validating deployment of all components"
            
            # Get list of expected components
            SOURCE_COMPONENTS='${{ needs.validate-promotion.outputs.source-components }}'
            
            for component in $(echo "$SOURCE_COMPONENTS" | jq -r '.[]'); do
              if [ -d "$component" ]; then
                echo "::notice::Validating component: $component"
                
                cd "$component"
                
                # Basic state validation
                if terragrunt state list > /dev/null 2>&1; then
                  RESOURCE_COUNT=$(terragrunt state list | wc -l)
                  echo "::notice::Component $component: $RESOURCE_COUNT resources"
                else
                  echo "::warning::State validation failed for $component"
                  VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
                fi
                
                cd ..
                
              else
                echo "::warning::Component $component not found in target environment"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            done
            
            # Run comprehensive output validation
            echo "::notice::Collecting outputs from all components"
            terragrunt run-all output || echo "::notice::Some components may not have outputs"
          fi
          
          # Set validation results
          if [ "$VALIDATION_ERRORS" -eq 0 ]; then
            echo "::notice::✅ Post-deployment validation passed"
            echo "POST_DEPLOYMENT_VALIDATION=passed" >> $GITHUB_ENV
          else
            echo "::warning::⚠️ Post-deployment validation completed with $VALIDATION_ERRORS issues"
            echo "POST_DEPLOYMENT_VALIDATION=warnings" >> $GITHUB_ENV
          fi
          
          echo "::notice::Post-deployment validation completed"
          
      - name: Deployment Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating deployment summary"
          
          echo "## 🚀 Target Environment Deployment Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Target Environment:** ${{ inputs.target_environment }}" >> $GITHUB_STEP_SUMMARY
          echo "**Region:** ${{ inputs.region }}" >> $GITHUB_STEP_SUMMARY
          echo "**Component:** ${{ inputs.component || 'all' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Start:** ${DEPLOYMENT_START}" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment End:** ${DEPLOYMENT_END}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ✅ Deployment Status" >> $GITHUB_STEP_SUMMARY
          
          if [ -n "${{ inputs.component }}" ]; then
            echo "- **Component Deployment:** ${COMPONENT_DEPLOYMENT_STATUS:-unknown}" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Overall Deployment:** ${DEPLOYMENT_STATUS:-unknown}" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "- **Post-Deployment Validation:** ${POST_DEPLOYMENT_VALIDATION:-unknown}" >> $GITHUB_STEP_SUMMARY
          echo "- **Security Validation:** ✅ Passed" >> $GITHUB_STEP_SUMMARY
          echo "- **Tool Verification:** ✅ Checksums validated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Environment URL:** https://${{ inputs.target_environment }}.yov.com" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # PROMOTION VERIFICATION
  # ==========================================================================
  
  verify-promotion:
    name: Comprehensive Promotion Verification
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [validate-promotion, deploy-target-environment]
    if: always() && !failure()
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Enhanced Promotion Verification
        timeout-minutes: 8
        run: |
          echo "::notice::Running comprehensive promotion verification"
          
          # Validate target environment integrity
          TARGET_PATH="aws/${{ inputs.region }}/${{ inputs.target_environment }}"
          
          # Enhanced path security validation
          if [[ "$TARGET_PATH" =~ \.\. ]]; then
            echo "::error::Path traversal detected in target path"
            exit 1
          fi
          
          if [ ! -d "$TARGET_PATH" ]; then
            echo "::error::Target environment directory not found: $TARGET_PATH"
            exit 1
          fi
          
          echo "::notice::Target environment directory validated: $TARGET_PATH"
          
          # Enhanced component synchronization verification
          VERIFICATION_ERRORS=0
          
          if [ -n "${{ inputs.component }}" ]; then
            # Verify specific component synchronization
            COMPONENT="${{ inputs.component }}"
            echo "::notice::Verifying component: $COMPONENT"
            
            COMPONENT_PATH="$TARGET_PATH/$COMPONENT"
            if [ ! -d "$COMPONENT_PATH" ]; then
              echo "::error::Component $COMPONENT not found in target environment"
              VERIFICATION_ERRORS=$((VERIFICATION_ERRORS + 1))
            else
              # Validate component structure
              if [ ! -f "$COMPONENT_PATH/terragrunt.hcl" ]; then
                echo "::error::Component $COMPONENT missing required terragrunt.hcl file"
                VERIFICATION_ERRORS=$((VERIFICATION_ERRORS + 1))
              else
                echo "::notice::✅ Component $COMPONENT structure validated"
              fi
              
              # Verify environment variable updates
              if grep -q "environment.*=.*\"${{ inputs.target_environment }}\"" "$COMPONENT_PATH"/*.hcl "$COMPONENT_PATH"/*.tf 2>/dev/null; then
                echo "::notice::✅ Component $COMPONENT environment variables updated"
              else
                echo "::warning::Environment variables may not be updated in $COMPONENT"
                VERIFICATION_ERRORS=$((VERIFICATION_ERRORS + 1))
              fi
            fi
            
          else
            # Verify all components from source exist in target
            echo "::notice::Verifying all component synchronization"
            
            SOURCE_COMPONENTS='${{ needs.validate-promotion.outputs.source-components }}'
            
            for component in $(echo "$SOURCE_COMPONENTS" | jq -r '.[]'); do
              echo "::notice::Verifying component: $component"
              
              COMPONENT_PATH="$TARGET_PATH/$component"
              if [ ! -d "$COMPONENT_PATH" ]; then
                echo "::error::Component $component not found in target environment"
                VERIFICATION_ERRORS=$((VERIFICATION_ERRORS + 1))
              else
                # Basic structure validation
                if [ ! -f "$COMPONENT_PATH/terragrunt.hcl" ]; then
                  echo "::warning::Component $component missing terragrunt.hcl file"
                  VERIFICATION_ERRORS=$((VERIFICATION_ERRORS + 1))
                else
                  echo "::notice::✅ Component $component verified"
                fi
              fi
            done
          fi
          
          # Security validation of synchronized content
          echo "::notice::Running security validation on promoted configuration"
          
          # Check for potential security issues in promoted files
          SECURITY_ISSUES=0
          
          # Check for hardcoded secrets
          if find "$TARGET_PATH" -name "*.tf" -o -name "*.hcl" -o -name "*.tfvars" -exec grep -l -i -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" {} \; 2>/dev/null | head -5; then
            echo "::warning::Potential hardcoded secrets detected in promoted configuration"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for overly permissive policies
          if find "$TARGET_PATH" -name "*.tf" -o -name "*.hcl" -exec grep -l -E '\*.*\*' {} \; 2>/dev/null | head -5; then
            echo "::warning::Wildcard permissions detected in promoted configuration"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Check for suspicious files
          SUSPICIOUS_FILES=$(find "$TARGET_PATH" -name "*.sh" -o -name "*.py" -o -name "*.rb" -o -name "*.exe" 2>/dev/null | head -10)
          if [ -n "$SUSPICIOUS_FILES" ]; then
            echo "::warning::Executable files found in promoted configuration:"
            echo "$SUSPICIOUS_FILES"
            SECURITY_ISSUES=$((SECURITY_ISSUES + 1))
          fi
          
          # Set verification results
          echo "VERIFICATION_ERRORS=$VERIFICATION_ERRORS" >> $GITHUB_ENV
          echo "SECURITY_ISSUES=$SECURITY_ISSUES" >> $GITHUB_ENV
          
          # Overall verification status
          if [ "$VERIFICATION_ERRORS" -eq 0 ] && [ "$SECURITY_ISSUES" -eq 0 ]; then
            echo "::notice::✅ Promotion verification passed completely"
            echo "VERIFICATION_STATUS=passed" >> $GITHUB_ENV
          elif [ "$VERIFICATION_ERRORS" -eq 0 ]; then
            echo "::warning::⚠️ Promotion verification passed with security warnings"
            echo "VERIFICATION_STATUS=warnings" >> $GITHUB_ENV
          else
            echo "::error::❌ Promotion verification failed"
            echo "VERIFICATION_STATUS=failed" >> $GITHUB_ENV
          fi
          
          echo "::notice::Promotion verification completed"
          
      - name: Generate Comprehensive Promotion Report
        timeout-minutes: 5
        run: |
          echo "::notice::Generating comprehensive promotion report"
          
          # Create detailed promotion report
          cat > promotion-report.md << EOF
          # 🚀 Environment Promotion Report
          
          ## Promotion Summary
          
          **Promotion Date:** $(date -Iseconds)
          **Source Environment:** ${{ inputs.source_environment }}
          **Target Environment:** ${{ inputs.target_environment }}
          **Region:** ${{ inputs.region }}
          **Component:** ${{ inputs.component || 'all' }}
          **Initiated By:** ${{ github.actor }}
          **Workflow Run:** ${{ github.run_id }}
          
          ## Promotion Status: $([ "${VERIFICATION_STATUS}" = "passed" ] && echo "✅ SUCCESSFUL" || echo "⚠️ COMPLETED WITH ISSUES")
          
          ### Verification Results
          
          - **Structure Verification:** $([ "${VERIFICATION_ERRORS}" -eq 0 ] && echo "✅ Passed" || echo "❌ Failed (${VERIFICATION_ERRORS} errors)")
          - **Security Validation:** $([ "${SECURITY_ISSUES}" -eq 0 ] && echo "✅ Clean" || echo "⚠️ ${SECURITY_ISSUES} issues detected")
          - **Component Synchronization:** $([ "${VERIFICATION_ERRORS}" -eq 0 ] && echo "✅ Complete" || echo "⚠️ Issues detected")
          
          ### Components Promoted
          
          EOF
          
          # Add component details
          if [ -n "${{ inputs.component }}" ]; then
            echo "- **${{ inputs.component }}** (specific component promotion)" >> promotion-report.md
          else
            SOURCE_COMPONENTS='${{ needs.validate-promotion.outputs.source-components }}'
            for component in $(echo "$SOURCE_COMPONENTS" | jq -r '.[]'); do
              echo "- **$component**" >> promotion-report.md
            done
          fi
          
          cat >> promotion-report.md << EOF
          
          ### Security Assessment
          
          $([ "${SECURITY_ISSUES}" -eq 0 ] && echo "🟢 **Security Status:** Clean - No security issues detected" || echo "🟡 **Security Status:** Review Required - ${SECURITY_ISSUES} potential issues detected")
          
          **Security Checks Performed:**
          - ✅ Path traversal validation
          - ✅ Hardcoded secrets scanning
          - ✅ Permission policy analysis  
          - ✅ Executable file detection
          - ✅ Configuration integrity validation
          
          ### Post-Promotion Checklist
          
          **Immediate Actions (Next 1 hour):**
          - [ ] Monitor target environment health dashboard
          - [ ] Validate application functionality via smoke tests
          - [ ] Check monitoring and alerting systems
          - [ ] Verify DNS and load balancer configurations
          
          **Short-term Actions (Next 24 hours):**
          - [ ] Monitor cost impact and budget alerts
          - [ ] Review application performance metrics
          - [ ] Validate backup and disaster recovery procedures
          - [ ] Update team documentation and runbooks
          
          **Medium-term Actions (Next 7 days):**
          - [ ] Conduct security posture review
          - [ ] Analyze performance trends and optimizations
          - [ ] Review and update monitoring thresholds
          - [ ] Plan next promotion cycle improvements
          
          ### Rollback Procedures
          
          $([ "${VERIFICATION_STATUS}" = "passed" ] && echo "**Rollback Risk:** Low - Promotion completed successfully" || echo "**Rollback Risk:** Medium - Issues detected during verification")
          
          **If rollback is required:**
          
          1. **Immediate Rollback:**
             \`\`\`bash
             # Use backup created during promotion
             # Located in promotion artifacts
             # Restore from: promotion-backup-[timestamp]
             \`\`\`
          
          2. **Infrastructure Rollback:**
             \`\`\`bash
             cd aws/${{ inputs.region }}/${{ inputs.target_environment }}
             terragrunt plan  # Review changes
             terragrunt apply # Apply previous configuration
             \`\`\`
          
          3. **Validation:**
             - Verify rollback completion
             - Test application functionality
             - Monitor system health
             - Update team communication
          
          ### Support Information
          
          **Technical Contacts:**
          - Platform Team: @platform-team
          - Security Team: @security-team  
          - On-call Engineer: @oncall
          
          **Useful Links:**
          - Environment Dashboard: https://${{ inputs.target_environment }}.yov.com/dashboard
          - Monitoring: https://monitoring.yov.com/${{ inputs.target_environment }}
          - Logs: https://logs.yov.com/${{ inputs.target_environment }}
          - Documentation: https://docs.yov.com/environments/${{ inputs.target_environment }}
          
          ---
          
          *This report was automatically generated by the YOV Environment Promotion Pipeline*  
          *Report Generated: $(date -Iseconds)*  
          *Pipeline Version: v2.0 (Security Enhanced)*
          EOF
          
          echo "::notice::Comprehensive promotion report generated"
          
      - name: Upload Promotion Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: promotion-report-${{ inputs.source_environment }}-to-${{ inputs.target_environment }}-${{ inputs.region }}
          path: |
            promotion-report.md
          retention-days: 180  # Extended retention for compliance
          compression-level: 6
          
      - name: Promotion Success Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating final promotion summary"
          
          echo "# 🎉 Environment Promotion Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** $([ "${VERIFICATION_STATUS}" = "passed" ] && echo "✅ Successfully Completed" || echo "⚠️ Completed with Issues")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Promotion Details" >> $GITHUB_STEP_SUMMARY
          echo "| Attribute | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Source Environment** | ${{ inputs.source_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Target Environment** | ${{ inputs.target_environment }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Region** | ${{ inputs.region }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Component** | ${{ inputs.component || 'all' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Initiated By** | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Completion Time** | $(date -Iseconds) |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## Verification Results" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Result |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Component Verification** | $([ "${VERIFICATION_ERRORS:-0}" -eq 0 ] && echo "✅ Passed" || echo "❌ ${VERIFICATION_ERRORS} errors") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Validation** | $([ "${SECURITY_ISSUES:-0}" -eq 0 ] && echo "✅ Clean" || echo "⚠️ ${SECURITY_ISSUES} issues") |" >> $GITHUB_STEP_SUMMARY
          echo "| **Overall Status** | $([ "${VERIFICATION_STATUS}" = "passed" ] && echo "✅ Success" || echo "⚠️ Review Required") |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${VERIFICATION_STATUS}" = "passed" ]; then
            echo "### ✅ Promotion Successful" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor target environment for the next 24 hours" >> $GITHUB_STEP_SUMMARY
            echo "- Validate application functionality and performance" >> $GITHUB_STEP_SUMMARY
            echo "- Review monitoring dashboards and alerts" >> $GITHUB_STEP_SUMMARY
            echo "- Update team documentation and communication" >> $GITHUB_STEP_SUMMARY
          else
            echo "### ⚠️ Review Required" >> $GITHUB_STEP_SUMMARY
            echo "- Review verification issues in the detailed report" >> $GITHUB_STEP_SUMMARY
            echo "- Consider rollback if critical issues are identified" >> $GITHUB_STEP_SUMMARY
            echo "- Engage appropriate teams for issue resolution" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor target environment closely" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## 📊 Environment Access" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment URL:** https://${{ inputs.target_environment }}.yov.com" >> $GITHUB_STEP_SUMMARY
          echo "- **Monitoring Dashboard:** Available in artifacts" >> $GITHUB_STEP_SUMMARY
          echo "- **Promotion Report:** Download from workflow artifacts" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Environment promotion completed by YOV Secure Promotion Pipeline*" >> $GITHUB_STEP_SUMMARY
