# =============================================================================
# PULL REQUEST VALIDATION PIPELINE
# =============================================================================
# Complete validation pipeline for pull requests including security,
# cost estimation, policy validation, and infrastructure planning

name: Pull Request Validation

# Global permissions - minimal by default, scoped per job as needed
permissions:
  contents: read
  actions: read

on:
  pull_request:
    branches:
      - main
      - develop
    paths:
      - 'aws/**'
      - 'gcp/**'
      - 'azure/**'
      - '_envcommon/**'
      - 'policies/**'
      - '*.hcl'
      - '*.tf'
      - '*.tfvars'
      - '.github/workflows/**'
      - 'scripts/**'

  pull_request_review:
    types: [submitted]

# Global environment variables
env:
  TERRAFORM_VERSION: "1.9.5"
  TERRAGRUNT_VERSION: "0.67.6"
  TFSEC_VERSION: "1.28.7"
  CHECKOV_VERSION: "3.2.39"
  INFRACOST_VERSION: "0.10.37"
  SENTINEL_VERSION: "0.24.2"
  OPA_VERSION: "0.68.0"
  AWS_DEFAULT_REGION: us-east-1

  # Performance and behavior settings
  TERRAGRUNT_PARALLELISM: 10
  TF_PLUGIN_CACHE_DIR: /tmp/.terraform.d/plugin-cache
  TERRAFORM_PLAN_TIMEOUT: 45m

# Concurrency control
concurrency:
  group: pr-validation-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  # ==========================================================================
  # CHANGE DETECTION AND ANALYSIS
  # ==========================================================================
  
  detect-changes:
    name: Detect Infrastructure Changes
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      actions: read
    outputs:
      has-terraform-changes: ${{ steps.changes.outputs.has-terraform-changes }}
      has-policy-changes: ${{ steps.changes.outputs.has-policy-changes }}
      changed-environments: ${{ steps.changes.outputs.changed-environments }}
      changed-regions: ${{ steps.changes.outputs.changed-regions }}
      changed-components: ${{ steps.changes.outputs.changed-components }}
      is-high-risk: ${{ steps.changes.outputs.is-high-risk }}
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Analyze Changes
        id: changes
        timeout-minutes: 5
        run: |
          echo "::notice::Analyzing changes in pull request #${{ github.event.pull_request.number }}"
          
          # Security: Validate PR context
          if [ -z "${{ github.event.pull_request.number }}" ]; then
            echo "::error::Invalid pull request context"
            exit 1
          fi
          
          # Get list of changed files with security validation
          echo "::notice::Fetching changed files from base branch"
          CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}...HEAD 2>/dev/null || {
            echo "::error::Failed to get diff from base branch"
            exit 1
          })
          
          if [ -z "$CHANGED_FILES" ]; then
            echo "::warning::No changed files detected"
            CHANGED_FILES=""
          fi
          
          echo "::notice::Changed files:"
          echo "$CHANGED_FILES"
          
          # Initialize outputs
          HAS_TERRAFORM_CHANGES=false
          HAS_POLICY_CHANGES=false
          
          # Check for Terraform/Terragrunt changes with input validation
          if echo "$CHANGED_FILES" | grep -qE '\.(hcl|tf|tfvars)$'; then
            echo "::notice::Terraform/Terragrunt changes detected"
            HAS_TERRAFORM_CHANGES=true
          fi
          
          # Check for policy changes with input validation
          if echo "$CHANGED_FILES" | grep -qE '^policies/'; then
            echo "::notice::Policy changes detected"
            HAS_POLICY_CHANGES=true
          fi
          
          # Extract changed environments with input sanitization
          ENVIRONMENTS=$(echo "$CHANGED_FILES" | grep -E '^aws/[^/]+/[^/]+/' | cut -d'/' -f3 | grep -E '^[a-zA-Z0-9_-]+$' | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
          ENVIRONMENTS=${ENVIRONMENTS:-'[]'}
          
          # Extract changed regions with input sanitization
          REGIONS=$(echo "$CHANGED_FILES" | grep -E '^aws/[^/]+/' | cut -d'/' -f2 | grep -E '^[a-zA-Z0-9_-]+$' | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
          REGIONS=${REGIONS:-'[]'}
          
          # Extract changed components with input sanitization
          COMPONENTS=$(echo "$CHANGED_FILES" | grep -E '^aws/[^/]+/[^/]+/[^/]+/' | cut -d'/' -f4 | grep -E '^[a-zA-Z0-9_-]+$' | sort -u | jq -R -s -c 'split("\n")[:-1] | map(select(. != ""))')
          COMPONENTS=${COMPONENTS:-'[]'}
          
          # Validate JSON format
          echo "$ENVIRONMENTS" | jq . > /dev/null || { echo "::error::Invalid environments JSON"; exit 1; }
          echo "$REGIONS" | jq . > /dev/null || { echo "::error::Invalid regions JSON"; exit 1; }
          echo "$COMPONENTS" | jq . > /dev/null || { echo "::error::Invalid components JSON"; exit 1; }
          
          echo "::notice::Changed environments: $ENVIRONMENTS"
          echo "::notice::Changed regions: $REGIONS"
          echo "::notice::Changed components: $COMPONENTS"
          
          # Enhanced risk assessment with security focus
          HIGH_RISK=false
          RISK_REASONS=()
          
          # Check for production environment changes
          if echo "$CHANGED_FILES" | grep -qE '/prod/'; then
            echo "::warning::Production environment changes detected - HIGH RISK"
            HIGH_RISK=true
            RISK_REASONS+=("production environment")
          fi
          
          # Check for critical component changes
          if echo "$CHANGED_FILES" | grep -qE '/(network|security|iam|database|vpc|firewall|kms|secrets)/' 2>/dev/null; then
            echo "::warning::Critical security component changes detected - HIGH RISK"
            HIGH_RISK=true
            RISK_REASONS+=("critical security components")
          fi
          
          # Check for workflow changes
          if echo "$CHANGED_FILES" | grep -qE '\.github/workflows/'; then
            echo "::warning::Workflow changes detected - HIGH RISK"
            HIGH_RISK=true
            RISK_REASONS+=("CI/CD workflows")
          fi
          
          # Check for policy changes
          if [ "$HAS_POLICY_CHANGES" = "true" ]; then
            echo "::warning::Security policy changes detected - HIGH RISK"
            HIGH_RISK=true
            RISK_REASONS+=("security policies")
          fi
          
          # Check for script changes
          if echo "$CHANGED_FILES" | grep -qE '^scripts/'; then
            echo "::warning::Script changes detected - MEDIUM RISK"
            RISK_REASONS+=("automation scripts")
          fi
          
          # Set outputs
          echo "has-terraform-changes=$HAS_TERRAFORM_CHANGES" >> $GITHUB_OUTPUT
          echo "has-policy-changes=$HAS_POLICY_CHANGES" >> $GITHUB_OUTPUT
          echo "changed-environments=$ENVIRONMENTS" >> $GITHUB_OUTPUT
          echo "changed-regions=$REGIONS" >> $GITHUB_OUTPUT
          echo "changed-components=$COMPONENTS" >> $GITHUB_OUTPUT
          echo "is-high-risk=$HIGH_RISK" >> $GITHUB_OUTPUT
          
          # Create enhanced change summary
          echo "## 🔍 Change Risk Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Author:** @${{ github.event.pull_request.user.login }}" >> $GITHUB_STEP_SUMMARY
          echo "**Base Branch:** ${{ github.base_ref }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Change Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Terraform Changes:** $([ "$HAS_TERRAFORM_CHANGES" = "true" ] && echo "✅ Yes" || echo "❌ No")" >> $GITHUB_STEP_SUMMARY
          echo "- **Policy Changes:** $([ "$HAS_POLICY_CHANGES" = "true" ] && echo "✅ Yes" || echo "❌ No")" >> $GITHUB_STEP_SUMMARY
          echo "- **Environments:** $ENVIRONMENTS" >> $GITHUB_STEP_SUMMARY
          echo "- **Regions:** $REGIONS" >> $GITHUB_STEP_SUMMARY
          echo "- **Components:** $COMPONENTS" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Risk Assessment" >> $GITHUB_STEP_SUMMARY
          if [ "$HIGH_RISK" = "true" ]; then
            echo "- **Risk Level:** 🚨 **HIGH RISK**" >> $GITHUB_STEP_SUMMARY
            echo "- **Risk Factors:** ${RISK_REASONS[*]}" >> $GITHUB_STEP_SUMMARY
            echo "- **Required Reviews:** Security team approval required" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Risk Level:** ✅ **LOW RISK**" >> $GITHUB_STEP_SUMMARY
            echo "- **Required Reviews:** Standard code review" >> $GITHUB_STEP_SUMMARY
          fi

  # ==========================================================================
  # CODE QUALITY AND FORMATTING
  # ==========================================================================
  
  code-quality:
    name: Code Quality & Formatting
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: detect-changes
    if: needs.detect-changes.outputs.has-terraform-changes == 'true'
    
    permissions:
      contents: read
      actions: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Infrastructure Tools
        timeout-minutes: 10
        run: |
          echo "::notice::Installing infrastructure tools with security verification"
          
          # Install Terraform with checksum verification
          echo "::notice::Installing Terraform v${TERRAFORM_VERSION}"
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_SHA256SUMS" -o terraform_checksums.txt
          
          # Verify Terraform checksum
          if grep -q "$(sha256sum terraform.zip | cut -d' ' -f1)" terraform_checksums.txt; then
            echo "::notice::Terraform checksum verified"
          else
            echo "::warning::Terraform checksum verification failed, proceeding with caution"
          fi
          
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          rm -f terraform.zip terraform_checksums.txt
          
          # Install Terragrunt with checksum verification
          echo "::notice::Installing Terragrunt v${TERRAGRUNT_VERSION}"
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/terragrunt_linux_amd64" -o terragrunt
          curl -fsSL "https://github.com/gruntwork-io/terragrunt/releases/download/v${TERRAGRUNT_VERSION}/SHA256SUMS" -o terragrunt_checksums.txt
          
          # Verify Terragrunt checksum
          if grep -q "$(sha256sum terragrunt | cut -d' ' -f1)" terragrunt_checksums.txt; then
            echo "::notice::Terragrunt checksum verified"
          else
            echo "::warning::Terragrunt checksum verification failed, proceeding with caution"
          fi
          
          chmod +x terragrunt && sudo mv terragrunt /usr/local/bin/
          rm -f terragrunt_checksums.txt
          
          # Install TFLint securely
          echo "::notice::Installing TFLint"
          curl -s https://raw.githubusercontent.com/terraform-linters/tflint/master/install_linux.sh | bash
          
          # Setup plugin cache directory
          mkdir -p ${TF_PLUGIN_CACHE_DIR}
          chmod 755 ${TF_PLUGIN_CACHE_DIR}
          
          # Verify installations
          terraform version
          terragrunt version
          tflint --version
          
      - name: Terraform Format Check
        timeout-minutes: 5
        run: |
          echo "::notice::Checking Terraform formatting across all files"
          
          FORMAT_ISSUES=0
          CHECKED_FILES=0
          
          # Check all .tf files with enhanced validation
          while IFS= read -r -d '' tf_file; do
            CHECKED_FILES=$((CHECKED_FILES + 1))
            echo "::notice::Checking format for: $tf_file"
            
            if terraform fmt -check=true -diff=true "$tf_file"; then
              echo "::notice::✅ Properly formatted: $tf_file"
            else
              echo "::error::❌ Formatting issues in: $tf_file"
              FORMAT_ISSUES=$((FORMAT_ISSUES + 1))
            fi
          done < <(find . -name "*.tf" -type f -print0)
          
          # Check .hcl files (Terragrunt configurations)
          while IFS= read -r -d '' hcl_file; do
            if [ -f "$hcl_file" ]; then
              CHECKED_FILES=$((CHECKED_FILES + 1))
              echo "::notice::Checking format for: $hcl_file"
              
              # Use terragrunt hclfmt for .hcl files
              if terragrunt hclfmt --terragrunt-check "$hcl_file" 2>/dev/null; then
                echo "::notice::✅ Properly formatted: $hcl_file"
              else
                echo "::warning::⚠️ HCL formatting issues in: $hcl_file"
                # Don't fail on HCL format issues, just warn
              fi
            fi
          done < <(find . -name "*.hcl" -type f -print0)
          
          echo "::notice::Format check summary:"
          echo "::notice::- Total files checked: $CHECKED_FILES"
          echo "::notice::- Terraform format issues: $FORMAT_ISSUES"
          
          if [ $FORMAT_ISSUES -gt 0 ]; then
            echo "::error::Found $FORMAT_ISSUES files with Terraform formatting issues"
            echo "::error::Please run 'terraform fmt -recursive' to fix formatting"
            exit 1
          else
            echo "::notice::✅ All Terraform files are properly formatted"
          fi
          
      - name: TFLint Validation
        timeout-minutes: 5
        run: |
          echo "::notice::Running TFLint validation"
          
          # Initialize TFLint
          tflint --init
          
          # Run TFLint with comprehensive checks
          if tflint --recursive --format compact; then
            echo "::notice::✅ TFLint validation passed"
          else
            echo "::error::❌ TFLint validation failed"
            echo "::error::Please fix the linting issues above"
            exit 1
          fi
          
      - name: Terragrunt Validation
        timeout-minutes: 5
        run: |
          echo "::notice::Running Terragrunt configuration validation"
          
          VALIDATION_ERRORS=0
          
          # Find all terragrunt.hcl files and validate them
          while IFS= read -r -d '' hcl_file; do
            if [[ "$(basename "$hcl_file")" == "terragrunt.hcl" ]]; then
              echo "::notice::Validating: $hcl_file"
              
              # Change to the directory containing the terragrunt.hcl file
              HCL_DIR=$(dirname "$hcl_file")
              
              if (cd "$HCL_DIR" && terragrunt validate-inputs --terragrunt-non-interactive); then
                echo "::notice::✅ Valid configuration: $hcl_file"
              else
                echo "::error::❌ Invalid configuration: $hcl_file"
                VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
              fi
            fi
          done < <(find . -name "*.hcl" -type f -print0)
          
          if [ $VALIDATION_ERRORS -gt 0 ]; then
            echo "::error::Found $VALIDATION_ERRORS Terragrunt configuration errors"
            exit 1
          else
            echo "::notice::✅ All Terragrunt configurations are valid"
          fi
          
      - name: Code Quality Summary
        run: |
          echo "## 🔍 Code Quality Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Terraform Format Check:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **TFLint Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Terragrunt Validation:** Passed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Status:** All code quality checks passed successfully!" >> $GITHUB_STEP_SUMMARY

  # ==========================================================================
  # SECURITY AND COMPLIANCE SCANNING
  # ==========================================================================
  
  security-scan:
    name: Security & Compliance Scanning
    runs-on: ubuntu-latest
    timeout-minutes: 25
    needs: detect-changes
    if: needs.detect-changes.outputs.has-terraform-changes == 'true'
    
    permissions:
      security-events: write
      contents: read
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Security Tools
        timeout-minutes: 10
        run: |
          echo "::notice::Installing security scanning tools with verification"
          
          # Install TFSec with checksum verification
          echo "::notice::Installing TFSec v${TFSEC_VERSION}"
          curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v${TFSEC_VERSION}/tfsec-linux-amd64" -o tfsec
          curl -fsSL "https://github.com/aquasecurity/tfsec/releases/download/v${TFSEC_VERSION}/tfsec_${TFSEC_VERSION}_checksums.txt" -o tfsec_checksums.txt
          
          # Verify TFSec checksum
          if grep -q "$(sha256sum tfsec | cut -d' ' -f1)" tfsec_checksums.txt; then
            echo "::notice::TFSec checksum verified"
          else
            echo "::warning::TFSec checksum verification failed, proceeding with caution"
          fi
          
          chmod +x tfsec && sudo mv tfsec /usr/local/bin/
          rm -f tfsec_checksums.txt
          
          # Install Checkov with version pinning
          echo "::notice::Installing Checkov v${CHECKOV_VERSION}"
          pip install --no-cache-dir checkov==${CHECKOV_VERSION}
          
          # Verify installations
          tfsec --version
          checkov --version
          
      - name: TFSec Security Scan
        timeout-minutes: 10
        run: |
          echo "::notice::Running TFSec security analysis"
          
          # Create results directory
          mkdir -p security-results
          
          # Run TFSec with comprehensive configuration
          echo "::notice::Executing TFSec scan with SARIF output"
          tfsec . \
            --format sarif \
            --out security-results/tfsec-results.sarif \
            --soft-fail \
            --minimum-severity LOW \
            --exclude-downloaded-modules \
            --no-colour || echo "::warning::TFSec scan completed with findings"
            
          # Generate human-readable report for PR review
          echo "::notice::Generating human-readable security report"
          tfsec . \
            --format table \
            --out security-results/tfsec-report.txt \
            --minimum-severity MEDIUM \
            --exclude-downloaded-modules \
            --no-colour || echo "::warning::TFSec table report generated"
            
          # Count security issues by severity
          if [ -f security-results/tfsec-results.sarif ]; then
            HIGH_ISSUES=$(jq '.runs[0].results | map(select(.level == "error")) | length' security-results/tfsec-results.sarif 2>/dev/null || echo "0")
            MEDIUM_ISSUES=$(jq '.runs[0].results | map(select(.level == "warning")) | length' security-results/tfsec-results.sarif 2>/dev/null || echo "0")
            LOW_ISSUES=$(jq '.runs[0].results | map(select(.level == "note")) | length' security-results/tfsec-results.sarif 2>/dev/null || echo "0")
            
            echo "::notice::TFSec findings: High=$HIGH_ISSUES, Medium=$MEDIUM_ISSUES, Low=$LOW_ISSUES"
            
            # Fail on high severity issues
            if [ "$HIGH_ISSUES" -gt "0" ]; then
              echo "::error::Found $HIGH_ISSUES high severity security issues"
              echo "TFSEC_HIGH_ISSUES=$HIGH_ISSUES" >> $GITHUB_ENV
            fi
          fi
          
      - name: Checkov Policy Scan
        timeout-minutes: 10
        run: |
          echo "::notice::Running Checkov policy validation"
          
          # Run Checkov with comprehensive checks
          echo "::notice::Executing Checkov scan with SARIF output"
          checkov \
            --directory . \
            --framework terraform \
            --output sarif \
            --output-file-path security-results/checkov-results.sarif \
            --soft-fail \
            --compact \
            --quiet || echo "::warning::Checkov scan completed with findings"
            
          # Generate summary report
          echo "::notice::Generating Checkov summary report"
          checkov \
            --directory . \
            --framework terraform \
            --output table \
            --output-file-path security-results/checkov-summary.txt \
            --compact \
            --quiet || echo "::warning::Checkov summary generated"
            
          # Count policy violations
          if [ -f security-results/checkov-results.sarif ]; then
            CHECKOV_FAILURES=$(jq '.runs[0].results | length' security-results/checkov-results.sarif 2>/dev/null || echo "0")
            echo "::notice::Checkov policy violations: $CHECKOV_FAILURES"
            
            if [ "$CHECKOV_FAILURES" -gt "0" ]; then
              echo "CHECKOV_VIOLATIONS=$CHECKOV_FAILURES" >> $GITHUB_ENV
            fi
          fi
          
      - name: Security Scan Analysis
        timeout-minutes: 3
        run: |
          echo "::notice::Analyzing security scan results"
          
          # Initialize counters
          TOTAL_HIGH_ISSUES=${TFSEC_HIGH_ISSUES:-0}
          TOTAL_VIOLATIONS=${CHECKOV_VIOLATIONS:-0}
          
          # Create security summary
          echo "## 🛡️ Security Scan Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### TFSec Analysis" >> $GITHUB_STEP_SUMMARY
          echo "- **High Severity Issues:** $TOTAL_HIGH_ISSUES" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $([ "$TOTAL_HIGH_ISSUES" -eq "0" ] && echo "✅ Passed" || echo "❌ Failed")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### Checkov Policy Validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Policy Violations:** $TOTAL_VIOLATIONS" >> $GITHUB_STEP_SUMMARY
          echo "- **Status:** $([ "$TOTAL_VIOLATIONS" -eq "0" ] && echo "✅ Passed" || echo "⚠️ Violations Found")" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall security assessment
          if [ "$TOTAL_HIGH_ISSUES" -eq "0" ]; then
            echo "### ✅ Overall Security Status: ACCEPTABLE" >> $GITHUB_STEP_SUMMARY
            echo "No high-severity security issues detected." >> $GITHUB_STEP_SUMMARY
          else
            echo "### ❌ Overall Security Status: REQUIRES ATTENTION" >> $GITHUB_STEP_SUMMARY
            echo "High-severity security issues must be resolved before merge." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Upload Security Results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: |
            security-results/tfsec-results.sarif
            security-results/checkov-results.sarif
          category: pr-security-scan
          
      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-reports-pr-${{ github.event.pull_request.number }}
          path: security-results/
          retention-days: 30
          compression-level: 6

  # ==========================================================================
  # COST ESTIMATION
  # ==========================================================================
  
  cost-estimation:
    name: Infrastructure Cost Estimation
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: detect-changes
    if: needs.detect-changes.outputs.has-terraform-changes == 'true'
    
    permissions:
      contents: read
      pull-requests: write
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        timeout-minutes: 5
        run: |
          echo "::notice::Installing Terraform for cost estimation"
          
          # Install Terraform with checksum verification
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_SHA256SUMS" -o terraform_checksums.txt
          
          # Verify checksum
          if grep -q "$(sha256sum terraform.zip | cut -d' ' -f1)" terraform_checksums.txt; then
            echo "::notice::Terraform checksum verified"
          else
            echo "::warning::Terraform checksum verification failed, proceeding with caution"
          fi
          
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          rm -f terraform.zip terraform_checksums.txt
          
          # Verify installation
          terraform version
          
      - name: Setup Infracost
        uses: infracost/actions/setup@v2
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          version: ${{ env.INFRACOST_VERSION }}
          
      - name: Generate Cost Estimate
        timeout-minutes: 12
        run: |
          echo "::notice::Generating infrastructure cost estimates for PR #${{ github.event.pull_request.number }}"
          
          # Create enhanced Infracost configuration
          cat > infracost.yml << 'EOF'
          version: 0.1
          projects:
            - path: .
              name: yov-infrastructure-pr
              terraform_plan_flags: -lock=false -input=false
              terraform_init_flags: -upgrade=false
              usage_file: infracost-usage.yml
          EOF
          
          # Create usage file for more accurate estimates
          cat > infracost-usage.yml << 'EOF'
          version: 0.1
          resource_usage:
            # Add common usage patterns for more accurate cost estimates
            aws_instance:
              operating_system: linux
              reserved_instance_type: ""
              reserved_instance_term: ""
              reserved_instance_payment_option: ""
            aws_lambda_function:
              monthly_requests: 100000
              average_request_duration: 500
          EOF
          
          echo "::notice::Running Infracost breakdown analysis"
          
          # Generate cost breakdown with enhanced error handling
          if infracost breakdown \
            --config-file infracost.yml \
            --format json \
            --out-file infracost-base.json \
            --log-level info; then
            
            echo "::notice::Cost estimation completed successfully"
            
            # Generate diff for PR comparison
            echo "::notice::Generating cost comparison with base branch"
            infracost diff \
              --path infracost-base.json \
              --format json \
              --out-file infracost-diff.json \
              --log-level info || echo "::warning::Cost diff comparison failed"
            
            # Generate human-readable summary
            if [ -f infracost-base.json ]; then
              MONTHLY_COST=$(jq -r '.totalMonthlyCost // "unknown"' infracost-base.json)
              CURRENCY=$(jq -r '.currency // "USD"' infracost-base.json)
              
              echo "::notice::Estimated monthly cost: $MONTHLY_COST $CURRENCY"
              
              # Check for high cost increases
              if [ -f infracost-diff.json ]; then
                COST_DIFF=$(jq -r '.diffTotalMonthlyCost // "0"' infracost-diff.json)
                
                # Alert on significant cost increases
                if [ "$(echo "$COST_DIFF > 100" | bc -l 2>/dev/null || echo "0")" -eq 1 ]; then
                  echo "::warning::Significant cost increase detected: +$COST_DIFF $CURRENCY/month"
                  echo "COST_ALERT=true" >> $GITHUB_ENV
                  echo "COST_INCREASE=$COST_DIFF" >> $GITHUB_ENV
                fi
              fi
              
            else
              echo "::warning::Cost estimation file not found"
            fi
            
          else
            echo "::error::Cost estimation failed"
            echo "::warning::Proceeding without cost analysis"
            
            # Create empty results for downstream steps
            echo '{"totalMonthlyCost": "0", "currency": "USD", "projects": []}' > infracost-base.json
          fi
          
      - name: Cost Analysis Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating cost analysis summary"
          
          echo "## 💰 Infrastructure Cost Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ -f infracost-base.json ]; then
            MONTHLY_COST=$(jq -r '.totalMonthlyCost // "unknown"' infracost-base.json)
            CURRENCY=$(jq -r '.currency // "USD"' infracost-base.json)
            
            echo "### Cost Estimation" >> $GITHUB_STEP_SUMMARY
            echo "- **Estimated Monthly Cost:** $MONTHLY_COST $CURRENCY" >> $GITHUB_STEP_SUMMARY
            
            if [ "${COST_ALERT:-false}" = "true" ]; then
              echo "- **⚠️ Cost Alert:** Significant increase of +${COST_INCREASE:-unknown} $CURRENCY/month" >> $GITHUB_STEP_SUMMARY
              echo "- **Recommendation:** Review resource sizing and optimization opportunities" >> $GITHUB_STEP_SUMMARY
            else
              echo "- **Status:** ✅ Cost increase within acceptable range" >> $GITHUB_STEP_SUMMARY
            fi
            
          else
            echo "### ⚠️ Cost Estimation Unavailable" >> $GITHUB_STEP_SUMMARY
            echo "Cost estimation could not be completed. Please check Infracost configuration." >> $GITHUB_STEP_SUMMARY
          fi
          
      - name: Post Cost Comment
        uses: infracost/actions/comment@v1
        if: always()
        continue-on-error: true
        with:
          path: infracost-base.json
          behavior: update
          
      - name: Upload Cost Analysis
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cost-analysis-pr-${{ github.event.pull_request.number }}
          path: |
            infracost-base.json
            infracost-diff.json
            infracost.yml
          retention-days: 30
          compression-level: 6

  # ==========================================================================
  # POLICY VALIDATION
  # ==========================================================================
  
  policy-validation:
    name: Policy Compliance Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: detect-changes
    if: needs.detect-changes.outputs.has-terraform-changes == 'true' || needs.detect-changes.outputs.has-policy-changes == 'true'
    
    permissions:
      contents: read
      pull-requests: write
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Setup Terraform
        timeout-minutes: 5
        run: |
          echo "::notice::Installing Terraform for policy validation"
          
          # Install Terraform with checksum verification
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
          curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_SHA256SUMS" -o terraform_checksums.txt
          
          # Verify checksum
          if grep -q "$(sha256sum terraform.zip | cut -d' ' -f1)" terraform_checksums.txt; then
            echo "::notice::Terraform checksum verified"
          else
            echo "::warning::Terraform checksum verification failed, proceeding with caution"
          fi
          
          unzip terraform.zip && sudo mv terraform /usr/local/bin/
          rm -f terraform.zip terraform_checksums.txt
          
          # Verify installation
          terraform version
          
      - name: Setup Sentinel CLI
        timeout-minutes: 5
        run: |
          echo "::notice::Installing Sentinel CLI for policy validation"
          
          # Download and verify Sentinel CLI
          curl -fsSL "https://releases.hashicorp.com/sentinel/${SENTINEL_VERSION}/sentinel_${SENTINEL_VERSION}_linux_amd64.zip" -o sentinel.zip
          curl -fsSL "https://releases.hashicorp.com/sentinel/${SENTINEL_VERSION}/sentinel_${SENTINEL_VERSION}_SHA256SUMS" -o sentinel_checksums.txt
          
          # Verify checksum
          if grep -q "$(sha256sum sentinel.zip | cut -d' ' -f1)" sentinel_checksums.txt; then
            echo "::notice::Sentinel checksum verified"
          else
            echo "::warning::Sentinel checksum verification failed, proceeding with caution"
          fi
          
          unzip sentinel.zip && sudo mv sentinel /usr/local/bin/
          rm -f sentinel.zip sentinel_checksums.txt
          
          # Verify installation
          sentinel version
          
      - name: Policy Structure Validation
        timeout-minutes: 5
        run: |
          echo "::notice::Validating Sentinel policy structure"
          
          # Check for required policy directories
          POLICY_DIRS=("security" "compliance" "cost-optimization" "governance")
          POLICY_ERRORS=0
          
          for dir in "${POLICY_DIRS[@]}"; do
            if [ ! -d "policies/$dir" ]; then
              echo "::warning::Missing policy directory: policies/$dir"
              POLICY_ERRORS=$((POLICY_ERRORS + 1))
            else
              echo "::notice::Found policy directory: policies/$dir"
            fi
          done
          
          # Find all Sentinel policy files
          if [ -d "policies" ]; then
            POLICY_FILES=$(find policies -name "*.sentinel" -type f)
            POLICY_COUNT=$(echo "$POLICY_FILES" | grep -c "\.sentinel$" || echo "0")
            
            echo "::notice::Found $POLICY_COUNT Sentinel policy files"
            
            if [ "$POLICY_COUNT" -eq 0 ]; then
              echo "::warning::No Sentinel policy files found"
              POLICY_ERRORS=$((POLICY_ERRORS + 1))
            else
              echo "Policy files found:"
              echo "$POLICY_FILES"
            fi
          else
            echo "::warning::No policies directory found, creating basic structure"
            mkdir -p policies/{security,compliance,cost-optimization,governance}
            POLICY_ERRORS=$((POLICY_ERRORS + 1))
          fi
          
          # Set validation results
          echo "POLICY_STRUCTURE_ERRORS=$POLICY_ERRORS" >> $GITHUB_ENV
          
      - name: Terraform Plan Generation
        timeout-minutes: 8
        run: |
          echo "::notice::Generating Terraform plan for policy validation"
          
          # Initialize Terraform
          terraform init -backend=false -input=false
          
          # Generate plan in JSON format for Sentinel analysis
          if terraform plan \
            -input=false \
            -lock=false \
            -detailed-exitcode \
            -out=tfplan.binary; then
            
            echo "::notice::Terraform plan generated successfully"
            
            # Convert binary plan to JSON
            terraform show -json tfplan.binary > tfplan.json
            
            # Validate JSON format
            if jq empty tfplan.json 2>/dev/null; then
              echo "::notice::Plan JSON is valid"
            else
              echo "::error::Invalid JSON in Terraform plan"
              exit 1
            fi
            
          else
            PLAN_EXIT_CODE=$?
            case $PLAN_EXIT_CODE in
              0)
                echo "::notice::No changes detected in Terraform plan"
                ;;
              1)
                echo "::error::Terraform plan failed"
                exit 1
                ;;
              2)
                echo "::notice::Terraform plan completed with changes detected"
                terraform show -json tfplan.binary > tfplan.json
                ;;
              *)
                echo "::error::Unexpected Terraform plan exit code: $PLAN_EXIT_CODE"
                exit 1
                ;;
            esac
          fi
          
      - name: Sentinel Policy Testing
        timeout-minutes: 10
        run: |
          echo "::notice::Running Sentinel policy validation against Terraform plan"
          
          # Create Sentinel configuration if it doesn't exist
          if [ ! -f "sentinel.hcl" ]; then
            echo "::notice::Creating default Sentinel configuration"
            cat > sentinel.hcl << 'EOF'
          policy "require-tags" {
            source = "./policies/security/require-tags.sentinel"
            enforcement_level = "advisory"
          }
          
          policy "restrict-instance-types" {
            source = "./policies/cost-optimization/restrict-instance-types.sentinel"
            enforcement_level = "soft-mandatory"
          }
          
          policy "require-encryption" {
            source = "./policies/security/require-encryption.sentinel"
            enforcement_level = "hard-mandatory"
          }
          
          policy "compliance-regions" {
            source = "./policies/compliance/compliance-regions.sentinel"
            enforcement_level = "soft-mandatory"
          }
          EOF
          fi
          
          # Create test data structure
          mkdir -p test-data
          
          # Copy Terraform plan as test data
          if [ -f "tfplan.json" ]; then
            cp tfplan.json test-data/
            echo "::notice::Terraform plan copied for Sentinel testing"
          else
            echo "::warning::No Terraform plan found for policy testing"
            echo '{"format_version":"1.0","terraform_version":"1.0.0","planned_values":{"root_module":{}}}' > test-data/tfplan.json
          fi
          
          # Run Sentinel policy tests
          POLICY_RESULTS=""
          POLICY_FAILURES=0
          
          if [ -d "policies" ] && [ -f "sentinel.hcl" ]; then
            echo "::notice::Executing Sentinel policy tests"
            
            # Test each policy file
            find policies -name "*.sentinel" -type f | while IFS= read -r policy_file; do
              policy_name=$(basename "$policy_file" .sentinel)
              echo "::notice::Testing policy: $policy_name"
              
              # Run Sentinel test
              if sentinel test "$policy_file" -verbose; then
                echo "::notice::✅ Policy passed: $policy_name"
              else
                echo "::warning::❌ Policy failed: $policy_name"
                POLICY_FAILURES=$((POLICY_FAILURES + 1))
              fi
            done
            
            # Apply policies to current plan
            echo "::notice::Applying policies to Terraform plan"
            if sentinel apply -data test-data/tfplan.json sentinel.hcl; then
              echo "::notice::✅ All policies passed against current plan"
              echo "POLICY_STATUS=passed" >> $GITHUB_ENV
            else
              echo "::warning::❌ Some policies failed against current plan"
              echo "POLICY_STATUS=failed" >> $GITHUB_ENV
              POLICY_FAILURES=$((POLICY_FAILURES + 1))
            fi
            
          else
            echo "::warning::No Sentinel policies found for validation"
            echo "POLICY_STATUS=no-policies" >> $GITHUB_ENV
          fi
          
          echo "POLICY_FAILURES=$POLICY_FAILURES" >> $GITHUB_ENV
          
      - name: Policy Validation Summary
        timeout-minutes: 2
        run: |
          echo "::notice::Generating policy validation summary"
          
          echo "## 🛡️ Policy Compliance Validation" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Policy structure validation results
          echo "### Policy Structure" >> $GITHUB_STEP_SUMMARY
          if [ "${POLICY_STRUCTURE_ERRORS:-0}" -eq 0 ]; then
            echo "- **Status:** ✅ Policy structure is valid" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Status:** ⚠️ Policy structure has ${POLICY_STRUCTURE_ERRORS} issues" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Policy execution results
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Policy Validation Results" >> $GITHUB_STEP_SUMMARY
          
          case "${POLICY_STATUS:-unknown}" in
            "passed")
              echo "- **Status:** ✅ All policies passed" >> $GITHUB_STEP_SUMMARY
              echo "- **Result:** Infrastructure changes comply with organizational policies" >> $GITHUB_STEP_SUMMARY
              ;;
            "failed")
              echo "- **Status:** ❌ Policy violations detected" >> $GITHUB_STEP_SUMMARY
              echo "- **Failures:** ${POLICY_FAILURES:-unknown} policy(ies) failed" >> $GITHUB_STEP_SUMMARY
              echo "- **Action Required:** Review and address policy violations" >> $GITHUB_STEP_SUMMARY
              ;;
            "no-policies")
              echo "- **Status:** ⚠️ No policies configured" >> $GITHUB_STEP_SUMMARY
              echo "- **Recommendation:** Configure Sentinel policies for compliance validation" >> $GITHUB_STEP_SUMMARY
              ;;
            *)
              echo "- **Status:** ❓ Policy validation inconclusive" >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          # Recommendations
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Recommendations" >> $GITHUB_STEP_SUMMARY
          echo "- Review policy enforcement levels in sentinel.hcl" >> $GITHUB_STEP_SUMMARY
          echo "- Ensure all required tags are present on resources" >> $GITHUB_STEP_SUMMARY
          echo "- Verify encryption is enabled for sensitive resources" >> $GITHUB_STEP_SUMMARY
          echo "- Validate compliance with regional restrictions" >> $GITHUB_STEP_SUMMARY
          
      - name: Upload Policy Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: policy-validation-pr-${{ github.event.pull_request.number }}
          path: |
            tfplan.json
            sentinel.hcl
            test-data/
            policies/
          retention-days: 30
          compression-level: 6

  # ==========================================================================
  # FINAL VALIDATION
  # ==========================================================================
  
  final-validation:
    name: Final Validation Summary
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [detect-changes, code-quality, security-scan, cost-estimation, policy-validation]
    if: always()
    
    permissions:
      contents: read
      pull-requests: write
      actions: read
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        
      - name: Collect Validation Results
        timeout-minutes: 5
        run: |
          echo "::notice::Collecting validation results from all jobs"
          
          # Job result variables
          CHANGE_DETECTION="${{ needs.detect-changes.result }}"
          CODE_QUALITY="${{ needs.code-quality.result }}"
          SECURITY_SCAN="${{ needs.security-scan.result }}"
          COST_ESTIMATION="${{ needs.cost-estimation.result }}"
          POLICY_VALIDATION="${{ needs.policy-validation.result }}"
          
          # Job outputs for detailed analysis
          HAS_TERRAFORM_CHANGES="${{ needs.detect-changes.outputs.has-terraform-changes }}"
          HAS_POLICY_CHANGES="${{ needs.detect-changes.outputs.has-policy-changes }}"
          HAS_CRITICAL_CHANGES="${{ needs.detect-changes.outputs.has-critical-changes }}"
          CHANGE_SCOPE="${{ needs.detect-changes.outputs.change-scope }}"
          RISK_LEVEL="${{ needs.detect-changes.outputs.risk-level }}"
          
          echo "::notice::Job Results Summary:"
          echo "- Change Detection: $CHANGE_DETECTION"
          echo "- Code Quality: $CODE_QUALITY"
          echo "- Security Scan: $SECURITY_SCAN"
          echo "- Cost Estimation: $COST_ESTIMATION"
          echo "- Policy Validation: $POLICY_VALIDATION"
          
          echo "::notice::Change Analysis:"
          echo "- Has Terraform Changes: $HAS_TERRAFORM_CHANGES"
          echo "- Has Policy Changes: $HAS_POLICY_CHANGES"
          echo "- Has Critical Changes: $HAS_CRITICAL_CHANGES"
          echo "- Change Scope: $CHANGE_SCOPE"
          echo "- Risk Level: $RISK_LEVEL"
          
          # Store results for summary generation
          echo "CHANGE_DETECTION=$CHANGE_DETECTION" >> $GITHUB_ENV
          echo "CODE_QUALITY=$CODE_QUALITY" >> $GITHUB_ENV
          echo "SECURITY_SCAN=$SECURITY_SCAN" >> $GITHUB_ENV
          echo "COST_ESTIMATION=$COST_ESTIMATION" >> $GITHUB_ENV
          echo "POLICY_VALIDATION=$POLICY_VALIDATION" >> $GITHUB_ENV
          echo "HAS_TERRAFORM_CHANGES=$HAS_TERRAFORM_CHANGES" >> $GITHUB_ENV
          echo "HAS_POLICY_CHANGES=$HAS_POLICY_CHANGES" >> $GITHUB_ENV
          echo "HAS_CRITICAL_CHANGES=$HAS_CRITICAL_CHANGES" >> $GITHUB_ENV
          echo "CHANGE_SCOPE=$CHANGE_SCOPE" >> $GITHUB_ENV
          echo "RISK_LEVEL=$RISK_LEVEL" >> $GITHUB_ENV
          
      - name: Calculate Overall Status
        timeout-minutes: 2
        run: |
          echo "::notice::Calculating overall validation status"
          
          # Initialize counters
          PASSED_JOBS=0
          FAILED_JOBS=0
          SKIPPED_JOBS=0
          TOTAL_JOBS=5
          
          # Count job results
          for result in "$CHANGE_DETECTION" "$CODE_QUALITY" "$SECURITY_SCAN" "$COST_ESTIMATION" "$POLICY_VALIDATION"; do
            case "$result" in
              "success")
                PASSED_JOBS=$((PASSED_JOBS + 1))
                ;;
              "failure")
                FAILED_JOBS=$((FAILED_JOBS + 1))
                ;;
              "skipped")
                SKIPPED_JOBS=$((SKIPPED_JOBS + 1))
                ;;
              *)
                FAILED_JOBS=$((FAILED_JOBS + 1))
                ;;
            esac
          done
          
          # Determine overall status
          if [ "$FAILED_JOBS" -eq 0 ]; then
            OVERALL_STATUS="PASSED"
            OVERALL_ICON="✅"
            STATUS_MESSAGE="All validation checks have passed successfully"
          elif [ "$PASSED_JOBS" -gt "$FAILED_JOBS" ]; then
            OVERALL_STATUS="PARTIAL"
            OVERALL_ICON="⚠️"
            STATUS_MESSAGE="Some validation checks have failed but majority passed"
          else
            OVERALL_STATUS="FAILED"
            OVERALL_ICON="❌"
            STATUS_MESSAGE="Multiple validation checks have failed"
          fi
          
          echo "::notice::Overall Status: $OVERALL_STATUS"
          echo "::notice::Passed: $PASSED_JOBS, Failed: $FAILED_JOBS, Skipped: $SKIPPED_JOBS"
          
          # Store final status
          echo "OVERALL_STATUS=$OVERALL_STATUS" >> $GITHUB_ENV
          echo "OVERALL_ICON=$OVERALL_ICON" >> $GITHUB_ENV
          echo "STATUS_MESSAGE=$STATUS_MESSAGE" >> $GITHUB_ENV
          echo "PASSED_JOBS=$PASSED_JOBS" >> $GITHUB_ENV
          echo "FAILED_JOBS=$FAILED_JOBS" >> $GITHUB_ENV
          echo "SKIPPED_JOBS=$SKIPPED_JOBS" >> $GITHUB_ENV
          
      - name: Generate Validation Summary
        timeout-minutes: 3
        run: |
          echo "::notice::Generating comprehensive validation summary"
          
          # Helper function to format job status
          format_status() {
            case "$1" in
              "success") echo "✅ Passed" ;;
              "failure") echo "❌ Failed" ;;
              "skipped") echo "⏭️ Skipped" ;;
              *) echo "❓ Unknown" ;;
            esac
          }
          
          # Generate summary report
          echo "# 🔍 Pull Request Validation Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Pull Request:** #${{ github.event.pull_request.number }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${{ github.head_ref }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -Iseconds)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status section
          echo "## ${OVERALL_ICON} Overall Status: ${OVERALL_STATUS}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "${STATUS_MESSAGE}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Summary:** ${PASSED_JOBS} passed, ${FAILED_JOBS} failed, ${SKIPPED_JOBS} skipped out of 5 total validation jobs" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Change Analysis section
          echo "## 📊 Change Analysis" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Attribute | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Terraform Changes** | ${HAS_TERRAFORM_CHANGES:-false} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Policy Changes** | ${HAS_POLICY_CHANGES:-false} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Critical Changes** | ${HAS_CRITICAL_CHANGES:-false} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Scope** | ${CHANGE_SCOPE:-unknown} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Risk Level** | ${RISK_LEVEL:-unknown} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Validation Results section
          echo "## 🔎 Validation Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Validation Job | Status | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|---------------|--------|-------------|" >> $GITHUB_STEP_SUMMARY
          echo "| **Change Detection** | $(format_status "$CHANGE_DETECTION") | Analyze code changes and determine validation scope |" >> $GITHUB_STEP_SUMMARY
          echo "| **Code Quality** | $(format_status "$CODE_QUALITY") | Terraform formatting, linting, and syntax validation |" >> $GITHUB_STEP_SUMMARY
          echo "| **Security Scan** | $(format_status "$SECURITY_SCAN") | Infrastructure security analysis with TFSec and Checkov |" >> $GITHUB_STEP_SUMMARY
          echo "| **Cost Estimation** | $(format_status "$COST_ESTIMATION") | Infrastructure cost analysis and budget impact |" >> $GITHUB_STEP_SUMMARY
          echo "| **Policy Validation** | $(format_status "$POLICY_VALIDATION") | Sentinel policy compliance and governance checks |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Risk Assessment section
          echo "## ⚠️ Risk Assessment" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${HAS_CRITICAL_CHANGES:-false}" = "true" ]; then
            echo "🔴 **High Risk:** This PR contains critical infrastructure changes that require careful review." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Recommendations:**" >> $GITHUB_STEP_SUMMARY
            echo "- Ensure thorough testing in non-production environments" >> $GITHUB_STEP_SUMMARY
            echo "- Consider implementing changes during maintenance windows" >> $GITHUB_STEP_SUMMARY
            echo "- Have rollback procedures ready" >> $GITHUB_STEP_SUMMARY
            echo "- Get additional reviewer approval" >> $GITHUB_STEP_SUMMARY
            
          elif [ "${RISK_LEVEL:-unknown}" = "medium" ]; then
            echo "🟡 **Medium Risk:** This PR contains moderate infrastructure changes." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Recommendations:**" >> $GITHUB_STEP_SUMMARY
            echo "- Validate changes in staging environment" >> $GITHUB_STEP_SUMMARY
            echo "- Monitor deployment closely" >> $GITHUB_STEP_SUMMARY
            echo "- Review cost implications" >> $GITHUB_STEP_SUMMARY
            
          else
            echo "🟢 **Low Risk:** This PR contains minimal infrastructure changes." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Recommendations:**" >> $GITHUB_STEP_SUMMARY
            echo "- Standard review process applies" >> $GITHUB_STEP_SUMMARY
            echo "- Verify all validation checks pass" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Next Steps section
          echo "## 🚀 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          case "$OVERALL_STATUS" in
            "PASSED")
              echo "✅ **Ready for Review:** All validation checks have passed." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This pull request is ready for human review and approval." >> $GITHUB_STEP_SUMMARY
              ;;
            "PARTIAL")
              echo "⚠️ **Requires Attention:** Some validation checks have failed." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Please review the failed checks and address any issues before proceeding." >> $GITHUB_STEP_SUMMARY
              ;;
            "FAILED")
              echo "❌ **Action Required:** Multiple validation checks have failed." >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "This pull request requires significant fixes before it can be approved." >> $GITHUB_STEP_SUMMARY
              ;;
          esac
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Validation completed by YOV Infrastructure CI/CD Pipeline*" >> $GITHUB_STEP_SUMMARY
          
      - name: Set Pull Request Status
        timeout-minutes: 2
        run: |
          echo "::notice::Setting pull request status based on validation results"
          
          # Create status summary for GitHub checks
          case "$OVERALL_STATUS" in
            "PASSED")
              echo "::notice::✅ All validations passed - PR ready for review"
              exit 0
              ;;
            "PARTIAL")
              echo "::warning::⚠️ Some validations failed - requires attention"
              exit 0
              ;;
            "FAILED")
              echo "::error::❌ Multiple validations failed - action required"
              exit 1
              ;;
            *)
              echo "::error::❓ Unknown validation status"
              exit 1
              ;;
          esac
