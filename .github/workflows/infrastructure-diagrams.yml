name: Generate Infrastructure Diagrams

# Security: Explicit minimal permissions for all jobs
permissions:
  contents: read
  actions: read
  id-token: write  # For OIDC authentication if needed

on:
  push:
    branches: [main, develop]
    paths:
      - 'aws/**/*.hcl'
      - 'aws/**/*.tf'
      - 'aws/**/*.tfvars'
      - '_envcommon/**/*.hcl'
      - 'root.hcl'
      - '.github/workflows/infrastructure-diagrams.yml'
  pull_request:
    branches: [main]
    paths:
      - 'aws/**/*.hcl'
      - 'aws/**/*.tf'
      - 'aws/**/*.tfvars'
      - '_envcommon/**/*.hcl'
      - 'root.hcl'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to generate diagram for (leave empty for all)'
        required: false
        type: choice
        options:
          - 'all'
          - 'dev'
          - 'staging'
          - 'prod'
      region:
        description: 'AWS Region'
        required: false
        type: choice
        options:
          - 'all'
          - 'eu-central-2'
          - 'eu-west-1'
          - 'us-east-1'

# Performance: Prevent concurrent runs and resource conflicts
concurrency:
  group: infrastructure-diagrams-${{ github.ref }}
  cancel-in-progress: true

env:
  TF_VERSION: '1.9.5'  # Updated to latest stable version
  TERRAGRUNT_VERSION: '0.67.6'  # Updated to latest stable version

jobs:
  discover-environments:
    name: Discover Terragrunt Environments
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Security: Prevent resource exhaustion
    permissions:
      contents: read  # Minimal permissions for this job
    outputs:
      environments: ${{ steps.discover.outputs.environments }}
      matrix: ${{ steps.discover.outputs.matrix }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate workflow inputs
        run: |
          # Security: Validate workflow_dispatch inputs
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            ENVIRONMENT="${{ inputs.environment }}"
            REGION="${{ inputs.region }}"
            
            if [[ -n "$ENVIRONMENT" && ! "$ENVIRONMENT" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "::error::Invalid environment input: $ENVIRONMENT"
              exit 1
            fi
            
            if [[ -n "$REGION" && ! "$REGION" =~ ^[a-zA-Z0-9_-]+$ ]]; then
              echo "::error::Invalid region input: $REGION"
              exit 1
            fi
            
            echo "::notice::Inputs validated successfully"
          fi

      - name: Discover environments
        id: discover
        env:
          INPUT_ENVIRONMENT: ${{ inputs.environment }}
          INPUT_REGION: ${{ inputs.region }}
        run: |
          # Security: Use environment variables instead of direct interpolation
          environments=()
          matrix_entries=()

          echo "::notice::Starting environment discovery process"

          # Find all aws/region/environment combinations
          for region_dir in aws/*/; do
            if [ -d "$region_dir" ]; then
              region=$(basename "$region_dir")
              
              # Filter by input region if specified
              if [[ -n "$INPUT_REGION" && "$INPUT_REGION" != "all" && "$INPUT_REGION" != "$region" ]]; then
                continue
              fi

              for env_dir in "$region_dir"*/; do
                if [ -d "$env_dir" ]; then
                  environment=$(basename "$env_dir")
                  env_path="aws/$region/$environment"
                  
                  # Filter by input environment if specified
                  if [[ -n "$INPUT_ENVIRONMENT" && "$INPUT_ENVIRONMENT" != "all" && "$INPUT_ENVIRONMENT" != "$environment" ]]; then
                    continue
                  fi

                  # Check if this directory contains Terragrunt or Terraform files
                  if find "$env_dir" -name "*.hcl" -o -name "*.tf" | grep -q .; then
                    env_name="$environment-$region"
                    environments+=("$env_name")
                    matrix_entries+=("{\"path\":\"$env_path\",\"name\":\"$env_name\",\"environment\":\"$environment\",\"region\":\"$region\"}")
                    echo "::notice::Discovered environment: $env_name at $env_path"
                  fi
                fi
              done
            fi
          done

          # Create JSON array for matrix
          if [ ${#matrix_entries[@]} -gt 0 ]; then
            matrix_json="[$(IFS=','; echo "${matrix_entries[*]}")]"
          else
            matrix_json="[]"
            echo "::warning::No environments discovered"
          fi

          echo "environments=$(IFS=','; echo "${environments[*]}")" >> $GITHUB_OUTPUT
          echo "matrix=$matrix_json" >> $GITHUB_OUTPUT

          echo "::notice::Discovery completed. Found ${#matrix_entries[@]} environments"
          
          # Debug output only in debug mode
          if [[ "${RUNNER_DEBUG:-}" == "1" ]]; then
            echo "::debug::Matrix JSON: $matrix_json"
          fi

  generate-diagrams:
    name: Generate Infrastructure Diagrams
    runs-on: ubuntu-latest
    timeout-minutes: 30  # Security: Prevent resource exhaustion
    needs: discover-environments
    if: needs.discover-environments.outputs.matrix != '[]'
    permissions:
      contents: read
      actions: read

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.discover-environments.outputs.matrix) }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5  # Updated to latest version
        with:
          python-version: '3.11'  # Updated to latest stable
          cache: 'pip'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install Graphviz
        run: |
          echo "::notice::Installing Graphviz dependencies"
          sudo apt-get update
          sudo apt-get install -y graphviz

      - name: Install blast-radius and dependencies
        run: |
          echo "::notice::Installing Python dependencies with pinned versions"
          # Security: Pin package versions for reproducible builds
          pip install blastradius==0.1.23 terraform-visual==1.0.0 || {
            echo "::warning::Failed to install pinned versions, trying latest"
            pip install blastradius terraform-visual
          }

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          terraform_wrapper: false

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-providers-${{ runner.os }}-${{ env.TF_VERSION }}
          restore-keys: |
            terraform-providers-${{ runner.os }}-

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v3.0.2  # Security: Use official action instead of manual download
        with:
          terragrunt_version: ${{ env.TERRAGRUNT_VERSION }}

      - name: Check if environment exists
        id: check-env
        env:
          MATRIX_PATH: ${{ matrix.path }}  # Security: Use environment variables
          MATRIX_NAME: ${{ matrix.name }}
        run: |
          echo "::notice::Checking environment existence for $MATRIX_NAME"
          if [ -d "$MATRIX_PATH" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::notice::Environment $MATRIX_PATH exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "::warning::Environment $MATRIX_PATH does not exist, skipping..."
          fi

      - name: Initialize Terragrunt
        if: steps.check-env.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        timeout-minutes: 5
        env:
          MATRIX_REGION: ${{ matrix.region }}
          MATRIX_ENVIRONMENT: ${{ matrix.environment }}
          MATRIX_NAME: ${{ matrix.name }}
          TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
        run: |
          echo "::notice::Initializing Terragrunt for $MATRIX_NAME"
          export AWS_REGION="$MATRIX_REGION"
          export ENVIRONMENT="$MATRIX_ENVIRONMENT"
          
          if ! terragrunt init --terragrunt-non-interactive; then
            echo "::warning::Terragrunt init failed, attempting terraform init as fallback"
            if ! terraform init -backend=false; then
              echo "::error::Both Terragrunt and Terraform initialization failed"
              exit 1
            fi
          fi
          echo "::notice::Initialization completed successfully"

      - name: Create Terragrunt Plan
        if: steps.check-env.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        timeout-minutes: 10
        env:
          MATRIX_REGION: ${{ matrix.region }}
          MATRIX_ENVIRONMENT: ${{ matrix.environment }}
          MATRIX_NAME: ${{ matrix.name }}
        run: |
          echo "::notice::Creating plan for $MATRIX_NAME"
          export AWS_REGION="$MATRIX_REGION"
          export ENVIRONMENT="$MATRIX_ENVIRONMENT"
          
          if ! terragrunt plan -out=tfplan --terragrunt-non-interactive; then
            echo "::warning::Terragrunt plan failed, attempting terraform plan as fallback"
            if ! terraform plan -out=tfplan; then
              echo "::warning::Plan generation failed, continuing with existing state for diagram generation"
            fi
          fi
          echo "::notice::Plan creation completed"

      - name: Generate infrastructure diagram
        if: steps.check-env.outputs.exists == 'true'
        working-directory: ${{ matrix.path }}
        timeout-minutes: 5
        env:
          MATRIX_NAME: ${{ matrix.name }}
          MATRIX_ENVIRONMENT: ${{ matrix.environment }}
          MATRIX_REGION: ${{ matrix.region }}
        run: |
          echo "::notice::Generating diagram for $MATRIX_NAME"
          mkdir -p ../../diagrams

          # Performance: Track operation duration
          start_time=$(date +%s)

          # Generate SVG diagram with enhanced error handling
          if blast-radius --svg > "../../diagrams/$MATRIX_NAME.svg" 2>/dev/null; then
            echo "::notice::Successfully generated SVG diagram for $MATRIX_NAME"
          else
            echo "::warning::Failed to generate SVG diagram for $MATRIX_NAME, creating placeholder"
            cat > "../../diagrams/$MATRIX_NAME.svg" << 'EOF'
          <svg xmlns="http://www.w3.org/2000/svg" width="500" height="250" viewBox="0 0 500 250">
            <rect width="500" height="250" fill="#f8f9fa" stroke="#dee2e6" stroke-width="2"/>
            <text x="250" y="120" text-anchor="middle" font-family="Arial, sans-serif" font-size="16" fill="#6c757d">
              Diagram generation failed
            </text>
            <text x="250" y="145" text-anchor="middle" font-family="Arial, sans-serif" font-size="12" fill="#6c757d">
              Check workflow logs for details
            </text>
          </svg>
          EOF
          fi

          # Generate DOT file for debugging (only in debug mode)
          if [[ "${RUNNER_DEBUG:-}" == "1" ]]; then
            blast-radius --dot > "../../diagrams/$MATRIX_NAME.dot" 2>/dev/null || echo "::debug::Failed to generate DOT file"
          fi

          # Performance: Calculate and report duration
          end_time=$(date +%s)
          duration=$((end_time - start_time))
          echo "::notice title=Performance Metrics::Environment=$MATRIX_ENVIRONMENT, Region=$MATRIX_REGION, Duration=${duration}s"

          # Cleanup
          rm -f tfplan

      - name: Upload diagrams as artifacts
        if: steps.check-env.outputs.exists == 'true'
        uses: actions/upload-artifact@v4  # Updated to latest version
        with:
          name: infrastructure-diagrams-${{ matrix.name }}
          path: |
            diagrams/${{ matrix.name }}.svg
            diagrams/${{ matrix.name }}.dot
          retention-days: 7  # Reduced retention for cost optimization
          compression-level: 6  # Optimize artifact size

  commit-diagrams:
    name: Commit Updated Diagrams
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [discover-environments, generate-diagrams]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.discover-environments.outputs.matrix != '[]'
    environment: production  # Security: Require manual approval for production commits
    permissions:
      contents: write  # Minimal explicit permissions for commit operations
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Download all diagram artifacts
        uses: actions/download-artifact@v4  # Updated to latest version
        with:
          path: artifacts
          pattern: infrastructure-diagrams-*
          merge-multiple: true

      - name: Move diagrams to correct location
        run: |
          echo "::notice::Moving diagram artifacts to correct location"
          mkdir -p diagrams
          find artifacts -name "*.svg" -exec cp {} diagrams/ \;
          find artifacts -name "*.dot" -exec cp {} diagrams/ \;
          
          diagram_count=$(find diagrams -name "*.svg" | wc -l)
          echo "::notice::Found $diagram_count diagram files"
          ls -la diagrams/

      - name: Generate diagram index
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "::notice::Generating diagram index page"
          cat > diagrams/index.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>YOV Infrastructure Diagrams</title>
            <style>
              body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                margin: 0;
                padding: 20px;
                background-color: #f8f9fa;
                line-height: 1.6;
              }
              .container {
                max-width: 1200px;
                margin: 0 auto;
                background: white;
                padding: 30px;
                border-radius: 10px;
                box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
              }
              h1 {
                color: #2c3e50;
                text-align: center;
                margin-bottom: 10px;
                font-size: 2.5em;
              }
              .subtitle {
                text-align: center;
                color: #7f8c8d;
                font-size: 1.1em;
                margin-bottom: 30px;
              }
              .diagram-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
                gap: 25px;
                margin: 30px 0;
              }
              .diagram-card {
                border: 1px solid #e1e8ed;
                border-radius: 10px;
                padding: 20px;
                background: #fafbfc;
                transition: transform 0.2s, box-shadow 0.2s;
              }
              .diagram-card:hover {
                transform: translateY(-2px);
                box-shadow: 0 6px 25px rgba(0, 0, 0, 0.15);
              }
              .diagram-card h3 {
                margin-top: 0;
                margin-bottom: 15px;
                color: #2c3e50;
                font-size: 1.3em;
              }
              .diagram-preview {
                text-align: center;
                margin: 15px 0;
              }
              .diagram-preview img {
                max-width: 100%;
                height: auto;
                border: 1px solid #d1d9e0;
                border-radius: 5px;
                transition: transform 0.2s;
              }
              .diagram-preview img:hover {
                transform: scale(1.02);
              }
              .view-link {
                display: inline-block;
                padding: 8px 16px;
                background: #3498db;
                color: white;
                text-decoration: none;
                border-radius: 5px;
                transition: background 0.2s;
              }
              .view-link:hover {
                background: #2980b9;
              }
              .timestamp {
                color: #95a5a6;
                font-size: 0.9em;
                text-align: center;
                margin-top: 30px;
                padding-top: 20px;
                border-top: 1px solid #ecf0f1;
              }
              .env-dev { border-left: 5px solid #3498db; }
              .env-staging { border-left: 5px solid #f39c12; }
              .env-prod { border-left: 5px solid #e74c3c; }
              .stats {
                background: #ecf0f1;
                padding: 15px;
                border-radius: 5px;
                margin-bottom: 20px;
                text-align: center;
              }
            </style>
          </head>
          <body>
            <div class="container">
              <h1>YOV Infrastructure Diagrams</h1>
              <div class="subtitle">Enterprise Terragrunt infrastructure visualizations across multiple regions</div>
          EOF

          # Count diagrams and add stats
          diagram_count=$(ls diagrams/*.svg 2>/dev/null | wc -l)
          echo "    <div class='stats'>Total Infrastructure Environments: $diagram_count</div>" >> diagrams/index.html
          echo "    <div class='diagram-grid'>" >> diagrams/index.html

          # Add each diagram to the index with enhanced security
          for svg in diagrams/*.svg; do
            if [ -f "$svg" ]; then
              filename=$(basename "$svg")
              # Security: Sanitize filename for HTML output
              safe_filename=$(echo "$filename" | sed 's/[<>&"]/\&#x/g')
              name=${filename%.svg}
              safe_name=$(echo "$name" | sed 's/[<>&"]/\&#x/g')

              # Determine environment class
              env_class=""
              if [[ $name == *"dev"* ]]; then
                env_class="env-dev"
              elif [[ $name == *"staging"* ]]; then
                env_class="env-staging"
              elif [[ $name == *"prod"* ]]; then
                env_class="env-prod"
              fi

              # Extract environment and region with input sanitization
              IFS='-' read -ra PARTS <<< "$name"
              environment=$(echo "${PARTS[0]}" | sed 's/[<>&"]/\&#x/g')
              region=$(IFS=-; echo "${PARTS[*]:1}" | sed 's/[<>&"]/\&#x/g')

              cat >> diagrams/index.html << EOF
              <div class="diagram-card $env_class">
                <h3>$environment ($region)</h3>
                <div class="diagram-preview">
                  <a href="$safe_filename" target="_blank">
                    <img src="$safe_filename" alt="$safe_name infrastructure diagram" loading="lazy">
                  </a>
                </div>
                <p style="text-align: center;">
                  <a href="$safe_filename" target="_blank" class="view-link">View Full Diagram</a>
                </p>
              </div>
          EOF
            fi
          done

          cat >> diagrams/index.html << EOF
            </div>

            <div class="timestamp">
              Last updated: $(date -u "+%Y-%m-%d %H:%M:%S UTC")
              <br>Generated from commit: $GITHUB_SHA
            </div>
          </div>
          </body>
          </html>
          EOF

          echo "::notice::Diagram index generated successfully"

      - name: Check for changes
        id: verify-changed-files
        run: |
          if git diff --quiet HEAD diagrams/; then
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "::notice::No changes detected in diagrams"
          else
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "::notice::Changes detected in diagrams"
            git diff --name-only HEAD diagrams/
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: |
          echo "::notice::Committing diagram updates"
          # Security: Use specific service account configuration
          git config --local user.email "infrastructure-bot@company.com"
          git config --local user.name "Infrastructure Diagram Bot"
          
          git add diagrams/
          git commit -m "Auto-update Terragrunt infrastructure diagrams

          - Updated diagrams for all environments
          - Generated on $(date -u '+%Y-%m-%d %H:%M:%S UTC')
          - Commit: $GITHUB_SHA

          [skip ci]"
          
          if ! git push; then
            echo "::error::Failed to push changes"
            exit 1
          fi
          
          echo "::notice::Successfully pushed diagram updates"

      - name: Create deployment summary
        run: |
          echo "## Infrastructure Diagrams Updated" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The following Terragrunt infrastructure diagrams have been generated and updated:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for svg in diagrams/*.svg; do
            if [ -f "$svg" ]; then
              filename=$(basename "$svg")
              name=${filename%.svg}
              echo "- **$name**" >> $GITHUB_STEP_SUMMARY
            fi
          done

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View all diagrams: [Infrastructure Diagrams Index](./diagrams/index.html)" >> $GITHUB_STEP_SUMMARY
          
          # Performance metrics
          total_envs=$(find diagrams -name "*.svg" | wc -l)
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Metrics" >> $GITHUB_STEP_SUMMARY
          echo "- **Total Environments**: $total_envs" >> $GITHUB_STEP_SUMMARY
          echo "- **Workflow Duration**: Approximately $((GITHUB_JOB_DURATION / 60)) minutes" >> $GITHUB_STEP_SUMMARY

      - name: Notify on failure
        if: failure()
        run: |
          echo "::error::Infrastructure diagram generation workflow failed"
          echo "::error::Please check the workflow logs for details"
          # Future: Add Slack/Teams notification here


